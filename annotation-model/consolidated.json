{
  "ua": [
    "DG00",
    "EB01",
    "EB02",
    "EB03",
    "EF11",
    "EF12",
    "EF13",
    "EF14",
    "EF21",
    "EF22",
    "EF23",
    "HY01",
    "MM01",
    "MM02",
    "PN01",
    "PN02",
    "PN03",
    "PN04",
    "PN05",
    "TK01"
  ],
  "results": {
    "/annotation-model/annotations/annotationMusts-manual.html": {
      "byUA": {
        "DG00": "OK",
        "EB01": "OK",
        "EB02": "OK",
        "EB03": "OK",
        "EF11": "OK",
        "EF12": "OK",
        "EF13": "OK",
        "EF14": "OK",
        "EF21": "OK",
        "EF22": "OK",
        "EF23": "OK",
        "HY01": "OK",
        "MM01": "OK",
        "MM02": "OK",
        "PN01": "OK",
        "PN02": "OK",
        "PN03": "OK",
        "PN04": "OK",
        "PN05": "OK",
        "TK01": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 20
      },
      "subtests": {
        "1:1 Implements **_@context_ key** and '**http://www.w3.org/ns/anno.jsonld**' is **a value of _@context_** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "PN01": "assert_true: ERROR: Annotation is missing @context key or 'http://www.w3.org/ns/anno.jsonld' is not a value of @context.; expected true got false",
            "PN02": "assert_true: ERROR: Annotation is missing @context key or 'http://www.w3.org/ns/anno.jsonld' is not a value of @context.; expected true got false",
            "PN03": "assert_true: ERROR: Annotation is missing @context key or 'http://www.w3.org/ns/anno.jsonld' is not a value of @context.; expected true got false",
            "PN04": "assert_true: ERROR: Annotation is missing @context key or 'http://www.w3.org/ns/anno.jsonld' is not a value of @context.; expected true got false",
            "PN05": "assert_true: ERROR: Annotation is missing @context key or 'http://www.w3.org/ns/anno.jsonld' is not a value of @context.; expected true got false"
          },
          "totals": {
            "PASS": 15,
            "FAIL": 5
          }
        },
        "1:2 Implements **Annotation _id_ key** which has a **single value** that is a **string of format uri** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "PN01": "assert_true: ERROR: Annotation is missing id key or its value is not a single string of format uri.; expected true got false",
            "PN02": "assert_true: ERROR: Annotation is missing id key or its value is not a single string of format uri.; expected true got false",
            "PN03": "assert_true: ERROR: Annotation is missing id key or its value is not a single string of format uri.; expected true got false",
            "PN04": "assert_true: ERROR: Annotation is missing id key or its value is not a single string of format uri.; expected true got false",
            "PN05": "assert_true: ERROR: Annotation is missing id key or its value is not a single string of format uri.; expected true got false"
          },
          "totals": {
            "PASS": 15,
            "FAIL": 5
          }
        },
        "1:3 Implements  **Annotation _type_ key** and '**Annotation**' is **a value of _type_** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "PN01": "assert_true: ERROR: Annotation is missing type key or 'Annotation' is not a value of type.; expected true got false",
            "PN02": "assert_true: ERROR: Annotation is missing type key or 'Annotation' is not a value of type.; expected true got false",
            "PN03": "assert_true: ERROR: Annotation is missing type key or 'Annotation' is not a value of type.; expected true got false",
            "PN04": "assert_true: ERROR: Annotation is missing type key or 'Annotation' is not a value of type.; expected true got false",
            "PN05": "assert_true: ERROR: Annotation is missing type key or 'Annotation' is not a value of type.; expected true got false"
          },
          "totals": {
            "PASS": 15,
            "FAIL": 5
          }
        },
        "1:4 Implements **_target_ key** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "PN01": "assert_true: Error: Annotation is missing target  key.; expected true got false",
            "PN02": "assert_true: Error: Annotation is missing target  key.; expected true got false",
            "PN03": "assert_true: Error: Annotation is missing target  key.; expected true got false",
            "PN04": "assert_true: Error: Annotation is missing target  key.; expected true got false",
            "PN05": "assert_true: Error: Annotation is missing target  key.; expected true got false"
          },
          "totals": {
            "PASS": 15,
            "FAIL": 5
          }
        },
        "1:5 Each **_target_** is one of a **string of format uri**, an **External Web Resource**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:6 Annotation has a **_body_ key**, or a **_bodyValue_ key**, or **neither**, but **NEVER both** - [model 3.2.5](https://www.w3.org/TR/annotation-model/#string-body)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:7 If present, each **_body_** is one of a **string of format uri**, an **External Web Resource**, an **Embedded Textual Body**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "FAIL",
            "EF13": "PASS",
            "EF14": "FAIL",
            "EF21": "PASS",
            "EF22": "FAIL",
            "EF23": "FAIL",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EF12": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; expected true got false",
            "EF14": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; expected true got false",
            "EF22": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; expected true got false",
            "EF23": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; expected true got false",
            "HY01": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; Errors: data.body should be string, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be string,object, data.body[0] should be string, data.body[0].type should be equal to one of the allowed values, data.body[0] should have required property 'items', data.body[0].type should be equal to one of the allowed values, data.body[0] should have required property 'items', data.body[0].type should be equal to one of the allowed values, data.body[0] should have required property 'items', data.body[0].type should be equal to one of the allowed values, data.body[0] should have required property 'items', data.body[0] should have required property 'source', data.body[0] should have required property 'id', data.body[0] should have required property 'value', data.body[0] should match exactly one schema in oneOf, data.body[1] should be string, data.body[1].type should be equal to one of the allowed values, data.body[1] should have required property 'items', data.body[1].type should be equal to one of the allowed values, data.body[1] should have required property 'items', data.body[1].type should be equal to one of the allowed values, data.body[1] should have required property 'items', data.body[1].type should be equal to one of the allowed values, data.body[1] should have required property 'items', data.body[1] should have required property 'source', data.body[1] should have required property 'id', data.body[1] should have required property 'value', data.body[1] should match exactly one schema in oneOf, data.body[2] should be string, data.body[2].type should be equal to one of the allowed values, data.body[2] should have required property 'items', data.body[2].type should be equal to one of the allowed values, data.body[2] should have required property 'items', data.body[2].type should be equal to one of the allowed values, data.body[2] should have required property 'items', data.body[2].type should be equal to one of the allowed values, data.body[2] should have required property 'items', data.body[2] should have required property 'source', data.body[2] should have required property 'id', data.body[2] should have required property 'value', data.body[2] should match exactly one schema in oneOf, data.body[3] should be string, data.body[3].type should be equal to one of the allowed values, data.body[3] should have required property 'items', data.body[3].type should be equal to one of the allowed values, data.body[3] should have required property 'items', data.body[3].type should be equal to one of the allowed values, data.body[3] should have required property 'items', data.body[3].type should be equal to one of the allowed values, data.body[3] should have required property 'items', data.body[3] should have required property 'source', data.body[3] should have required property 'id', data.body[3] should have required property 'value', data.body[3] should match exactly one schema in oneOf, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 15,
            "FAIL": 5
          }
        },
        "1:8 If present the **_bodyValue_ key** has a **single value** that is a **string** - [model 3.2.5](https://www.w3.org/TR/annotation-model/#string-body)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:9 If present the Annotation-level **_created_ key** has a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:10 If present the Annotation-level **_modified_ key** has a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:11 If present the Annotation-level **_generated_ key** has a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:12 If present the Annotation-level **_rights_ key** has values that are all **strings of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:13 If present the Annotation-level **_canonical_ key** has a **single value** that is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:14 If present the Annotation-level **_via_ key** has values that are all **strings of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:15 If present as a body or body/source property, the **_textDirection_ key** has a **single value** which is **one of 'ltr', 'rtl', 'auto'** - [model 3.2.1](https://www.w3.org/TR/annotation-model/#external-web-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:16 If present all body-level or body/source-level **_created_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:17 If present all body-level or body/source-level **_modified_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:18 If present all body-level or body/source-level **_rights_ key values** are strings of **format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:19 If present all body-level or body/source-level **_canonical_ keys** have a **single value** which is a string of **format uri** - [model 3.3.](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:20 If present all body-level or body/source-level **_via_ key values** are strings of **format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:21 If an **External Web Resource** is a body, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:22 If an **External Web Resource** is a body, it does NOT have an **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:23 If a **Choice or Set** is a body, it does NOT have a **_value_ key** - [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:24 If a **Choice or Set** is a body, it does NOT have a **_source_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:25 If a **Choice or Set** is a body, it does NOT have a **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:26 If an **Embedded Textual Body** is a body, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:27 If an **Embedded Textual Body** is a body, it does NOT have a **_source_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:28 If a **Specific Resource** is a body, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:29 If a **Specific Resource** is a body, it does NOT have a **_value_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:30 If present as a target or target/source property, the **_textDirection_ key** has a **single value** which is **one of 'ltr', 'rtl', 'auto'** - [model 3.2.1](https://www.w3.org/TR/annotation-model/#external-web-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:31 If present all target-level or target/source-level **_created_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:32 If present all target-level or target/source-level **_modified_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:33 If present all target-level or target/source-level **_rights_ key values** are strings of **format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:34 If present all target-level or target/source-level **_canonical_ keys** have a **single value** which is a string of **format uri** - [model 3.3.](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:35 If present all target-level or target/source-level **_via_ key values** are strings of **format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:36 If an **External Web Resource** is a target, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-targets-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:37 If an **External Web Resource** is a target, it does NOT have an **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:38 If a **Choice or Set** is a target, it does NOT have a **_value_ key** - [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-targ)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:39 If a **Choice or Set** is a target, it does not have a **_source_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:40 If a **Choice or Set** is a target, it does NOT have a **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:41 If a **Specific Resource Target** is a target, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-targets-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:42 If a **Specific Resource** is a target, it does NOT have a **_value_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:43 Neither **target** Resources nor target Choice or Set items have a **_type_ key** which includes a value of **TextualBody** [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:44 If present **Specific Resource _selector_ key** has one or more values each of which is of **format uri** or an object having a **_type_ key** with a **single value** which is one of **'FragmentSelector', 'CssSelector', 'XPathSelector', 'TextQuoteSelector', 'TextPositionSelector', 'DataPositionSelector', 'SvgSelector', 'RangeSelector'** - [model 4.2](https://www.w3.org/TR/annotation-model/#selectors)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {
            "HY01": "assert_true: ERROR: Annotation contains one or more Specific Resources selectors having value(s) which is(are) not of format uri, nor an object having a type key with a single value which is one of 'FragmentSelector', 'CssSelector', 'XPathSelector', 'TextQuoteSelector', 'TextPositionSelector', 'DataPositionSelector', 'SvgSelector', 'RangeSelector'.; Errors: data['target'] should be string, data['target'] should be object, data['target'] should be object, data['target'] should be object, data['target'][0] should be string, data['target'][0].selector should be string, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should be object, data['target'][0].selector should match exactly one schema in oneOf, data['target'][0].selector should match some schema in anyOf, data['target'][0].selector should be object, data['target'][0].selector[0] should be string, data['target'][0].selector[0] should have required property 'id', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'value', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'value', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'value', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'exact', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'start', data['target'][0].selector[0] should have required property 'end', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'start', data['target'][0].selector[0] should have required property 'end', data['target'][0].selector[0] should have required property 'startSelector', data['target'][0].selector[0] should have required property 'endSelector', data['target'][0].selector[0].type should be equal to one of the allowed values, data['target'][0].selector[0] should have required property 'value', data['target'][0].selector[0] should have required property 'id', data['target'][0].selector[0] should match exactly one schema in oneOf, data['target'][0].selector[0] should match some schema in anyOf, data['target'][0].selector[0] should match exactly one schema in oneOf, data['target'][0].selector should match exactly one schema in oneOf, data['target'][0] should match exactly one schema in oneOf, data['target'] should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 19,
            "FAIL": 1
          }
        },
        "1:45 If present **Specific Resource _state_ key** has one or more values each of which is of **format uri** or an object having a **_type_ key** with a **single value** which is one of **'TimeState' or 'HttpRequestState'** - [model 4.3](https://www.w3.org/TR/annotation-model/#states)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:46 If present **Specific Resource _state_ key** has one or more values each of which is of **format uri** or an object having a **_type_ key** with a **single value** which is one of **'TimeState' or 'HttpRequestState'** - [model 4.3](https://www.w3.org/TR/annotation-model/#states)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:47 If any **Specific Resource _styleClass_ keys** are present, a **_stylesheet_ key** (a key of Annotation) with a **single value** is also present [model 4.4](https://www.w3.org/TR/annotation-model/#styles)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "PN01": "assert_true: ERROR: Annotation contains one or more Specific Resources with styleClass key, but does not contain an Annotation-level stylesheet key.; expected true got false",
            "PN02": "assert_true: ERROR: Annotation contains one or more Specific Resources with styleClass key, but does not contain an Annotation-level stylesheet key.; expected true got false",
            "PN03": "assert_true: ERROR: Annotation contains one or more Specific Resources with styleClass key, but does not contain an Annotation-level stylesheet key.; expected true got false",
            "PN04": "assert_true: ERROR: Annotation contains one or more Specific Resources with styleClass key, but does not contain an Annotation-level stylesheet key.; expected true got false",
            "PN05": "assert_true: ERROR: Annotation contains one or more Specific Resources with styleClass key, but does not contain an Annotation-level stylesheet key.; expected true got false"
          },
          "totals": {
            "PASS": 15,
            "FAIL": 5
          }
        },
        "1:48 If present all **Selectors of _type_ FragmentSelector, CssSelector, or XPathSelector** have a **_value_ key** with a **single value** - [model 4.2](https://www.w3.org/TR/annotation-model/#selectors)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:49 If present all **Selectors of _type_ TextQuoteSelector** have an **_exact_ key** with a **single value** - [model 4.2.4](https://www.w3.org/TR/annotation-model/#text-quote-selector)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:50 If present all **Selectors of _type_ TextPositionSelector or DataPositionSelector** have both a **_start_ key** and an **_end_ key**, each with a **single non-negative integer value** [model 4.2](https://www.w3.org/TR/annotation-model/#selectors)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:51 If present all **Selectors of _type_ SvgSelector** have either a **_value_ key** or an **_id_ key** with a **single value** of format uri  [model 4.2.7](https://www.w3.org/TR/annotation-model/#svg-selector)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:52 If present all **Selectors of _type_ RangeSelector** have both a **_startSelector_ key** and an **_endSelector_ key**, each with a **single value** which is a **Selector** - [model 4.2.8](https://www.w3.org/TR/annotation-model/#range-selector)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {
            "HY01": "assert_true: ERROR: Annotation contains a Range selector that is NOT of format uri and NOT an object having both startSelector and endSelector keys.; Errors: data['target'] should be string, data['target'] should be object, data['target'] should be object, data['target'][0] should be string, data['target'][0].selector should be string, data['target'][0].selector should be object, data['target'][0].selector[0] should be string, data['target'][0].selector[0] should NOT be valid, data['target'][0].selector[0] should have required property 'startSelector', data['target'][0].selector[0] should have required property 'endSelector', data['target'][0].selector[0] should match exactly one schema in oneOf, data['target'][0].selector[0] should match exactly one schema in oneOf, data['target'][0].selector should match exactly one schema in oneOf, data['target'][0] should match exactly one schema in oneOf, data['target'] should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 19,
            "FAIL": 1
          }
        },
        "1:53 If present all **States of _type_ TimeState** each have either (but not both) a **_souceDate_ key** or paired **_sourceDateStart_ and _sourceDateEnd_ keys,** each of which is a **single value** of **format date-time**- [model 4.3.1](https://www.w3.org/TR/annotation-model/#time-state)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        },
        "1:54 If present all **States of _type_ HttpRequestState** have a **_value_ key** - [model 4.3.2](https://www.w3.org/TR/annotation-model/#request-header-state)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 20
          }
        }
      }
    },
    "/annotation-model/annotations/annotationOptionals-manual.html": {
      "byUA": {
        "DG00": "OK",
        "EB01": "OK",
        "EB02": "OK",
        "EB03": "OK",
        "EF11": "OK",
        "EF12": "OK",
        "EF13": "OK",
        "EF14": "OK",
        "EF21": "OK",
        "EF22": "OK",
        "EF23": "OK",
        "HY01": "OK",
        "MM01": "OK",
        "MM02": "OK",
        "PN01": "OK",
        "PN02": "OK",
        "PN03": "OK",
        "PN04": "OK",
        "PN05": "OK",
        "TK01": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 20
      },
      "subtests": {
        "1:13 Implements **_body_ key** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "PN01": "assert_true: WARNING: Annotation Should have a body.; expected true got false",
            "PN02": "assert_true: WARNING: Annotation Should have a body.; expected true got false",
            "PN03": "assert_true: WARNING: Annotation Should have a body.; expected true got false",
            "PN04": "assert_true: WARNING: Annotation Should have a body.; expected true got false",
            "PN05": "assert_true: WARNING: Annotation Should have a body.; expected true got false"
          },
          "totals": {
            "PASS": 13,
            "FAIL": 5
          }
        },
        "1:20 Implements **body _type_ key** with one or more values each of which is drawn from the **model's list of resource classes** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should have required property 'type', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 1,
            "FAIL": 10
          }
        },
        "1:26 Implements **body _purpose_ key** with one or more values are each drawn from **model's list of Motivations** [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should have required property 'purpose', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should have required property 'source', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'purpose', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 1,
            "FAIL": 10
          }
        },
        "1:30 Implements **External Web Resource** with **_id_ key** as a body of the Annotation  [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "EF12": "PASS",
            "EF14": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; Errors: data.body should NOT be valid, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; Errors: data.body should NOT be valid, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:31 Implements **Embedded Textual Body** with **_value_ key** as a body of the Annotation  [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "EF12": "PASS",
            "EF14": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:32 Implements **Embedded Textual Body _type_ key** which includes a value of **TextualBody** [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; expected true got false",
            "PN02": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; expected true got false",
            "PN03": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; expected true got false",
            "PN04": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; expected true got false",
            "PN05": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; expected true got false",
            "TK01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should have required property 'value', data.body should have required property 'type', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 4,
            "FAIL": 9
          }
        },
        "1:34 Implements **Choice or Set** with type and items key as a body - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Body may be a Choice or Set.; Errors: data.body should have required property 'type', data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 1,
            "FAIL": 10
          }
        },
        "1:37 Implements **Composite** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'type', data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 1,
            "FAIL": 10
          }
        },
        "1:55 Implements **External Web Resource** with **_id_ key** as a target of the Annotation  [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EB02": "assert_true: INFORMATIONAL: An External Web Resource target may be used as an Annotation Target.; Errors: data.target should NOT be valid, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: An External Web Resource target may be used as an Annotation Target.; Errors: data.target should NOT be valid, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 2
          }
        },
        "1:62 Implements **Specific Resource** with **_source_ and at least one of _purpose, selector, state, style, renderedVia, scope_ keys** as a target of the Annotation  [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB02": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'source', data.target should have required property 'items', data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 3
          }
        },
        "1:63 Implements **Specific Resource _refinedBy_ key** [model 4.2.9](https://www.w3.org/TR/annotation-model/#refinement-of-selection), [model 4.3.3](https://www.w3.org/TR/annotation-model/#refinement-of-state)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource selector or state may include refinedBy key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'selector', data.target should match some schema in anyOf, data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource selector or state may include refinedBy key with one or more values.; Errors: data.body should have required property 'state', data.body should have required property 'selector', data.body should match some schema in anyOf, data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource selector or state may include refinedBy key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource selector or state may include refinedBy key with one or more values.; Errors: data.body should have required property 'state', data.body should have required property 'selector', data.body should match some schema in anyOf, data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'selector', data.target should match some schema in anyOf, data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 9,
            "FAIL": 4
          }
        },
        "1:66 Implements **Specific Resource _scope_ key** - [model 4.6](https://www.w3.org/TR/annotation-model/#scope-of-a-resource)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "PASS",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include scope key with one or more values that is of format uri.; Errors: data.body should have required property 'source', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include scope key with one or more values that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include scope key with one or more values that is of format uri.; Errors: data.body should have required property 'source', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'source', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 3
          }
        },
        "1:67 Implements **Specific Resource Selector** - [model 4.2](https://www.w3.org/TR/annotation-model/#selectors)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a Selector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a Selector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a Selector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a Selector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 9,
            "FAIL": 4
          }
        },
        "1:77 Implements **Specific Resource SVG Selector** - [model 4.2.7](https://www.w3.org/TR/annotation-model/#svg-selector)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "MM01": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include svgSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include svgSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include svgSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include svgSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include svgSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 7,
            "FAIL": 5
          }
        },
        "1:79 Implements **Specific Resource State** - [model 4.3](https://www.w3.org/TR/annotation-model/#states)": {
          "byUA": {
            "DG00": "PASS",
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a State .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include a State .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "PASS": 9,
            "FAIL": 4
          }
        },
        "1:1 Implements Annotation-level **_creator_ key** with a **single value** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "PN01": "assert_true: WARNING: Annotation SHOULD have a creator key with a single value.; expected true got false",
            "PN02": "assert_true: WARNING: Annotation SHOULD have a creator key with a single value.; expected true got false",
            "PN03": "assert_true: WARNING: Annotation SHOULD have a creator key with a single value.; expected true got false",
            "PN04": "assert_true: WARNING: Annotation SHOULD have a creator key with a single value.; expected true got false",
            "PN05": "assert_true: WARNING: Annotation SHOULD have a creator key with a single value.; expected true got false",
            "TK01": "assert_true: WARNING: Annotation SHOULD have a creator key with a single value.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 6
          }
        },
        "1:2 Implements Annotation-level **_created_ key** which has a **single value** that is a **string of format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "MM01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "PN01": "assert_true: WARNING: Valid Annotation-level created key not found. Annotation should have exactly one created key value.; expected true got false",
            "PN02": "assert_true: WARNING: Valid Annotation-level created key not found. Annotation should have exactly one created key value.; expected true got false",
            "PN03": "assert_true: WARNING: Valid Annotation-level created key not found. Annotation should have exactly one created key value.; expected true got false",
            "PN04": "assert_true: WARNING: Valid Annotation-level created key not found. Annotation should have exactly one created key value.; expected true got false",
            "PN05": "assert_true: WARNING: Valid Annotation-level created key not found. Annotation should have exactly one created key value.; expected true got false",
            "TK01": "assert_true: WARNING: Valid Annotation-level created key not found. Annotation should have exactly one created key value.; Errors: data should have required property 'created'; expected true got false"
          },
          "totals": {
            "PASS": 12,
            "FAIL": 6
          }
        },
        "1:3 Implements **_motivation_ key** with a **single value** that is from the **model's list of Motivations** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "FAIL",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB02": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; Errors: data.motivation should be equal to one of the allowed values, data.motivation should be array, data.motivation should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; Errors: data should have required property 'motivation'; expected true got false",
            "PN01": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; expected true got false",
            "PN02": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; expected true got false",
            "PN03": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; expected true got false",
            "PN04": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; expected true got false",
            "PN05": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; expected true got false",
            "TK01": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; Errors: data should have required property 'motivation'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 8
          }
        },
        "1:4 Implements **_bodyValue_ key** which has a **single value** that is a **string** [model 3.2.5](https://www.w3.org/TR/annotation-model/#string-body)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "EF11": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false"
          },
          "totals": {
            "FAIL": 10,
            "PASS": 1
          }
        },
        "1:5 Implements Annotation-level **_generated_ key** which has a **single value** that is a **string of format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false"
          },
          "totals": {
            "FAIL": 10,
            "PASS": 7
          }
        },
        "1:6 Implements Annotation-level **_modified_ key** which has a **single value** that is a **string of format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false"
          },
          "totals": {
            "FAIL": 9,
            "PASS": 1
          }
        },
        "1:7 Implements **_audience_ key** which has one or more values with each audience instance described using **[schema.org/Audience](http://schema.org/Audience) classes and properties** - [model 3.3.3](https://www.w3.org/TR/annotation-model/#intended-audience)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:8 Implements **_motivation_ key** which has one or more values, each of which is from the **model's list of Motivations** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "FAIL",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB02": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; Errors: data.motivation should be equal to one of the allowed values, data.motivation should be array, data.motivation should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; Errors: data should have required property 'motivation'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; Errors: data should have required property 'motivation'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 8
          }
        },
        "1:9 Implements Annotation-level **_rights_** key which has one or more values, each of which is a **string of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:10 Implements Annotation-level **_canonical_ key** which has a single value that is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "MM01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false"
          },
          "totals": {
            "FAIL": 10,
            "PASS": 1
          }
        },
        "1:11 Implements Annotation-level **_via_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:12 Implements **_stylesheet_ key** which has a **single value** that is an **object or string of format uri**. [model 4.4](https://www.w3.org/TR/annotation-model/#styles)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:14 Implements **body _format_ key** with a **single value** that is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; expected true got false",
            "PN02": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; expected true got false",
            "PN03": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; expected true got false",
            "PN04": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; expected true got false",
            "PN05": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; expected true got false"
          },
          "totals": {
            "FAIL": 8,
            "PASS": 4
          }
        },
        "1:15 Implements **body _language_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; expected true got false",
            "PN02": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; expected true got false",
            "PN03": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; expected true got false",
            "PN04": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; expected true got false",
            "PN05": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; expected true got false",
            "TK01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should have required property 'language', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 9,
            "PASS": 1
          }
        },
        "1:16 Implements **body _creator_ key** with a **single value**  [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: The description of a body should include creator key with a single value.; expected true got false",
            "PN02": "assert_true: WARNING: The description of a body should include creator key with a single value.; expected true got false",
            "PN03": "assert_true: WARNING: The description of a body should include creator key with a single value.; expected true got false",
            "PN04": "assert_true: WARNING: The description of a body should include creator key with a single value.; expected true got false",
            "PN05": "assert_true: WARNING: The description of a body should include creator key with a single value.; expected true got false",
            "TK01": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:17 Implements **body _created_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should have required property 'created', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; expected true got false",
            "PN02": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; expected true got false",
            "PN03": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; expected true got false",
            "PN04": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; expected true got false",
            "PN05": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; expected true got false",
            "TK01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should have required property 'created', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:18 Implements **body _format_ key** with one or more values each of which is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "MM01": "PASS",
            "MM02": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; expected true got false"
          },
          "totals": {
            "FAIL": 8,
            "PASS": 4
          }
        },
        "1:19 Implements **body _language_ key** with one or more values each of which is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "PASS",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should have required property 'language', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 9,
            "PASS": 1
          }
        },
        "1:21 Implements **body _processingLanguage_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should have required property 'processingLanguage', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should have required property 'processingLanguage', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:22 Implements **body _textDirection_ key** with a **single value** that is is **one of ltr, rtl, or auto** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should have required property 'textDirection', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should have required property 'textDirection', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:23 Implements **body _modified_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "PASS"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should have required property 'modified', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; expected true got false"
          },
          "totals": {
            "FAIL": 9,
            "PASS": 1
          }
        },
        "1:24 Implements **body _audience_ key** which has one or more values with each audience instance described using **[schema.org/Audience](http://schema.org/Audience) classes and properties** - [model 3.3.3](https://www.w3.org/TR/annotation-model/#intended-audience)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should have required property 'audience', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should have required property 'audience', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:25 Implements **body _accessibility_ key** which has one or more values - [model 3.3.4](#https://www.w3.org/TR/annotation-model/#accessibility-of-content)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should have required property 'accessibility', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should have required property 'accessibility', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:27 Implements **body _rights_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should have required property 'rights', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should have required property 'rights', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:28 Implements **body _canonical_ key** with a **single value** that is of **format uri** [model 3.3.7](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should have required property 'canonical', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should have required property 'canonical', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:29 Implements **body _via_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should have required property 'via', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should have required property 'via', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:33 Implements **Embedded Textual Body _type_ key** which includes a value of **Text** [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should have required property 'value', data.body should have required property 'type', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:35 Implements **Choice** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'type', data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:36 Implements **List** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'type', data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:38 Implements **Independents** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'type', data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:39 Implements **target _format_ key** with a **single value** that is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should have required property 'format', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should have required property 'format', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:40 Implements **target _language_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should have required property 'language', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should have required property 'language', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:41 Implements **target _creator_ key** with a **single value**  [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should have required property 'creator', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should have required property 'creator', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:42 Implements **target _created_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should have required property 'created', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should have required property 'created', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:43 Implements **target _format_ key** with one or more values each of which is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should have required property 'format', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should have required property 'format', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:44 Implements **target _language_ key** with one or more values each of which is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should have required property 'language', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should have required property 'language', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:45 Implements **target _type_ key** with one or more values each of which is drawn from the **model's list of resource classes** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:46 Implements **target _processingLanguage_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should have required property 'processingLanguage', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should have required property 'processingLanguage', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:47 Implements **target _textDirection_ key** with a **single value** that is is **one of ltr, rtl, or auto** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should have required property 'textDirection', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should have required property 'textDirection', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:48 Implements **target _modified_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should have required property 'modified', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should have required property 'modified', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:49 Implements **target _audience_ key** which has one or more values with each audience instance described using **[schema.org/Audience](http://schema.org/Audience) classes and properties** - [model 3.3.3](https://www.w3.org/TR/annotation-model/#intended-audience)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should have required property 'audience', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should have required property 'audience', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:50 Implements **target _accessibility_ key** which has one or more values - [model 3.3.4](#https://www.w3.org/TR/annotation-model/#accessibility-of-content)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should have required property 'accessibility', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should have required property 'accessibility', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:51 Implements **target _purpose_ key** with one or more values are each drawn from **model's list of Motivations** [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should have required property 'purpose', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should have required property 'source', data.target should have required property 'value', data.target should match exactly one schema in oneOf, data.target should have required property 'purpose', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:52 Implements **target _rights_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should have required property 'rights', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should have required property 'rights', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:53 Implements **target _canonical_ key** with a **single value** that is of **format uri** [model 3.3.7](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should have required property 'canonical', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should have required property 'canonical', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:54 Implements **target _via_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should have required property 'via', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should have required property 'via', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:56 Implements **Choice or Set** with type and items key as a target - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Target may be a Choice or Set.; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Target may be a Choice or Set.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Target may be a Choice or Set.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Target may be a Choice or Set.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Target may be a Choice or Set.; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:57 Implements **Choice** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-targets-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:58 Implements **List** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-targets-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:59 Implements **Composite** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-targets-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:60 Implements **Independents** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-targets-and-targets)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:61 Implements **Specific Resource** with **_source_ and at least one of _purpose, selector, state, style, renderedVia, scope_ keys** as a body of the Annotation  [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'source', data.body should have required property 'items', data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'source', data.body should have required property 'items', data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:64 Implements **Specific Resource _styleClass_ key** with one or more values on a **Specific Resource** - [model 4.4](https://www.w3.org/TR/annotation-model/#styles)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include styleClass key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'styleClass', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include styleClass key with one or more values.; Errors: data.body should have required property 'styleClass', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include styleClass key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include styleClass key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include styleClass key with one or more values.; Errors: data.body should have required property 'styleClass', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'styleClass', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:65 Implements **Specific Resource _renderedVia_ key** with one or more values on a **Specific Resource** - [model 4.5](https://www.w3.org/TR/annotation-model/#rendering-software)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include renderedVia key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'renderedVia', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include renderedVia key with one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'renderedVia', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include renderedVia key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include renderedVia key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include renderedVia key with one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'renderedVia', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'source', data.target should have required property 'renderedVia', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:68 Implements **Specific Resource Fragment Selector** - [model 4.2.1](https://www.w3.org/TR/annotation-model/#fragment-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "MM02": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include fragmentSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include fragmentSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include fragmentSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include fragmentSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include fragmentSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 6
          }
        },
        "1:69 Implements **Specific Resource _conformsTo_ key** with a **single value** which is of **format uri** on a **Specific Resource FragmentSelector** - [model 4.2.1](https://www.w3.org/TR/annotation-model/#fragment-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a FragmentSelector should include conformsTo key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a FragmentSelector should include conformsTo key with a single value that is of format uri.; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a FragmentSelector should include conformsTo key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: WARNING: The description of a FragmentSelector should include conformsTo key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a FragmentSelector should include conformsTo key with a single value that is of format uri.; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:70 Implements **Specific Resource CSS Selector** - [model 4.2.2](https://www.w3.org/TR/annotation-model/#css-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include cssSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include cssSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include cssSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include cssSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include cssSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:71 Implements **Specific Resource XPath Selector** - [model 4.2.3](https://www.w3.org/TR/annotation-model/#xpath-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include xpathSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include xpathSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include xpathSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include xpathSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include xpathSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:72 Implements **Specific Resource Text Quote Selector** - [model 4.2.4](https://www.w3.org/TR/annotation-model/#text-quote-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textQuoteSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textQuoteSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textQuoteSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textQuoteSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 4,
            "PASS": 6
          }
        },
        "1:73 Implements **Specific Resource _prefix_ key** with a **single string value** on a **Specific Resource TextQuoteSelector** - [model 4.2.4](https://www.w3.org/TR/annotation-model/#text-quote-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a TextQuoteSelector should include prefix key with a single value .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a TextQuoteSelector should include prefix key with a single value .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a TextQuoteSelector should include prefix key with a single value .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a TextQuoteSelector should include prefix key with a single value .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 4,
            "PASS": 6
          }
        },
        "1:74 Implements **Specific Resource _suffix_ key** with a **single string value** on a **Specific Resource TextQuoteSelector** - [model 4.2.4](https://www.w3.org/TR/annotation-model/#text-quote-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: The description of a TextQuoteSelector should include suffix key with a single value .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: WARNING: The description of a TextQuoteSelector should include suffix key with a single value .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: WARNING: The description of a TextQuoteSelector should include suffix key with a single value .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: WARNING: The description of a TextQuoteSelector should include suffix key with a single value .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 4,
            "PASS": 6
          }
        },
        "1:75 Implements **Specific Resource Text Position Selector** - [model 4.2.5](https://www.w3.org/TR/annotation-model/#text-position-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "PASS",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textPositionSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textPositionSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textPositionSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include textPositionSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 4,
            "PASS": 6
          }
        },
        "1:76 Implements **Specific Resource Data Position Selector** - [model 4.2.6](https://www.w3.org/TR/annotation-model/#data-position-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include dataPositionSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include dataPositionSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include dataPositionSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include dataPositionSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include dataPositionSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:78 Implements **Specific Resource Range Selector** - [model 4.2.8](https://www.w3.org/TR/annotation-model/#range-selector)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include rangeSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include rangeSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include rangeSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include rangeSelector .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include rangeSelector .; Errors: data.body should have required property 'selector', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'selector', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:80 Implements **Specific Resource Time State** - [model 4.3.1](https://www.w3.org/TR/annotation-model/#time-state)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include timeState State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include timeState State .; Errors: data.body should have required property 'state', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include timeState State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include timeState State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include timeState State .; Errors: data.body should have required property 'state', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:81 Implements **Specific Resource Request Header State** - [model 4.3.2](https://www.w3.org/TR/annotation-model/#request-header-state)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include requestHeaderState State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a Specific Resource may include requestHeaderState State .; Errors: data.body should have required property 'state', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a Specific Resource may include requestHeaderState State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include requestHeaderState State .; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a Specific Resource may include requestHeaderState State .; Errors: data.body should have required property 'state', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:82 Implements **Specific Resource _cached_ key** with one or more values each of **format uri** on a **Specific Resource TimeState** - [model 4.3.1](https://www.w3.org/TR/annotation-model/#time-state)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a TimeState may include cached key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a TimeState may include cached key with a single value that is of format uri.; Errors: data.body should have required property 'state', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a TimeState may include cached key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a TimeState may include cached key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a TimeState may include cached key with a single value that is of format uri.; Errors: data.body should have required property 'state', data.body should have required property 'items', data.body should match exactly one schema in oneOf, data.body should be array, data.body should NOT be valid, data.body should match exactly one schema in oneOf, data.target should have required property 'state', data.target should have required property 'items', data.target should match exactly one schema in oneOf, data.target should be array, data.target should NOT be valid, data.target should match exactly one schema in oneOf, data should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        }
      }
    },
    "/annotation-model/annotations/annotationsAgentOptionals-manual.html": {
      "byUA": {
        "DG00": "OK",
        "EB01": "OK",
        "EB02": "OK",
        "EB03": "OK",
        "EF11": "OK",
        "EF12": "OK",
        "EF13": "OK",
        "EF14": "OK",
        "EF21": "OK",
        "EF22": "OK",
        "EF23": "OK",
        "HY01": "OK",
        "MM01": "OK",
        "MM02": "OK",
        "PN01": "OK",
        "PN02": "OK",
        "PN03": "OK",
        "PN04": "OK",
        "PN05": "OK",
        "TK01": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 20
      },
      "subtests": {
        "Annotation implements optional keys and meets optional key value constraints for Creator and Generator Agents": {
          "byUA": {
            "DG00": "PASS",
            "MM02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 2
          }
        },
        "1:1 Implements **_creator_ key** which has one or more values, each of which is a **string of format uri** or an **object** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "PN01": "assert_true: INFORMATIONAL: creator key not found. Annotation may have zero or more creators.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: creator key not found. Annotation may have zero or more creators.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: creator key not found. Annotation may have zero or more creators.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: creator key not found. Annotation may have zero or more creators.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: creator key not found. Annotation may have zero or more creators.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: creator key not found. Annotation may have zero or more creators.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 6
          }
        },
        "1:2 Implements Annotation-level creator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN02": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN03": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN04": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN05": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "TK01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:3 Implements Annotation-level creator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN02": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN03": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN04": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN05": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "TK01": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Creator (Agent) not found. Agents should have one or more type values.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:4 Implements Annotation-level creator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN02": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN03": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN04": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN05": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "TK01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:5 Implements Annotation-level creator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN02": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN03": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN04": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN05": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "TK01": "assert_true: WARNING: Single name for Annotation Creator (Agent) not found. Agents should have exactly one name value.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:6 Implements Annotation-level creator (Agent) **_name_ key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Name for Annotation Creator (Agent) not found. Agents may have one or more name values.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:7 Implements Annotation-level creator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email for Annotation Creator (Agent) not found. Agents may have one or more email values.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 3,
            "FAIL": 7
          }
        },
        "1:8 Implements Annotation-level creator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:9 Implements Annotation-level creator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.creator should be object, data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Homepage for Annotation Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data should have required property 'creator'; expected true got false"
          },
          "totals": {
            "PASS": 3,
            "FAIL": 7
          }
        },
        "1:10 Implements **_generator_ key** which has one or more values, each of which is a **string of format uri** or an **object** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information).": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: generator key not found. Annotation may have zero or more generators.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 7
          }
        },
        "1:11 Implements Annotation-level generator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN02": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN03": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN04": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN05": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "TK01": "assert_true: WARNING: Id for Annotation Generator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "PASS": 3,
            "FAIL": 7
          }
        },
        "1:12 Implements Annotation-level generator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN02": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN03": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN04": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN05": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "TK01": "assert_true: WARNING: Type (Person, Organization, Software) for Annotation Generator (Agent) not found. Agents should have one or more type values.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 7
          }
        },
        "1:13 Implements Annotation-level generator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN02": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN03": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN04": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN05": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "TK01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:14 Implements Annotation-level generator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN02": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN03": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN04": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN05": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "TK01": "assert_true: WARNING: Single name for Annotation Generator (Agent) not found. Agents should have exactly one name value.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:15 Implements Annotation-level generator (Agent) **_name_ key** with one or more values. [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Name for Annotation Generator (Agent) not found. Agents may have one or more name values.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "PASS": 10,
            "FAIL": 7
          }
        },
        "1:16 Implements Annotation-level generator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:17 Implements Annotation-level generator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:18 Implements Annotation-level generator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "PASS",
            "EB02": "PASS",
            "EB03": "PASS",
            "EF11": "PASS",
            "EF12": "PASS",
            "EF13": "PASS",
            "EF14": "PASS",
            "EF21": "PASS",
            "EF22": "PASS",
            "EF23": "PASS",
            "HY01": "FAIL",
            "MM01": "PASS",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "HY01": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; Errors: data should have required property 'generator'; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Homepage for Annotation Generator (Agent) not found. Agents may have one or more homepage values.; Errors: data should have required property 'generator'; expected true got false"
          },
          "totals": {
            "PASS": 11,
            "FAIL": 7
          }
        },
        "1:19 Implements **body _creator_ key** with one or more values - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:20 Implements Body-level creator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN02": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN03": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN04": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "PN05": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; expected true got false",
            "TK01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:21 Implements Body-level creator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN02": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN03": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN04": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "PN05": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; expected true got false",
            "TK01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:22 Implements Body-level creator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN02": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN03": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN04": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "PN05": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; expected true got false",
            "TK01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:23 Implements Body-level creator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN02": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN03": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN04": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "PN05": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; expected true got false",
            "TK01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:24 Implements Body-level creator (Agent) **_name_ key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:25 Implements Body-level creator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:26 Implements Body-level creator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:27 Implements Body-level creator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "FAIL",
            "PN02": "FAIL",
            "PN03": "FAIL",
            "PN04": "FAIL",
            "PN05": "FAIL",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "PN01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN02": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN03": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN04": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "PN05": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 10
          }
        },
        "1:28 Implements **target _creator_ key** with one or more values - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should have required property 'creator', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should have required property 'creator', data.target should have required property 'items', data.target should have required property 'source', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:29 Implements Target-level creator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:30 Implements Target-level creator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:31 Implements Target-level creator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:32 Implements Target-level creator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:33 Implements Target-level creator (Agent) **_name_ key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:34 Implements Target-level creator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:35 Implements Target-level creator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        },
        "1:36 Implements Target-level creator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EB01": "FAIL",
            "EB02": "FAIL",
            "EB03": "FAIL",
            "HY01": "FAIL",
            "PN01": "PASS",
            "PN02": "PASS",
            "PN03": "PASS",
            "PN04": "PASS",
            "PN05": "PASS",
            "TK01": "FAIL"
          },
          "UAmessage": {
            "EB01": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB02": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "EB03": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "HY01": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "TK01": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should have required property 'creator', data.target should have required property 'source', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 5,
            "PASS": 5
          }
        }
      }
    }
  }
}