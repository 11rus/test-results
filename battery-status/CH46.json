{
  "results": [
    {
      "test": "/battery-status/battery-interface-idlharness.html",
      "subtests": [
        {
          "name": "Navigator interface: operation getBattery()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator must be primary interface of navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator interface: navigator must inherit property \"getBattery\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of BatteryManager.prototype expected \"[object BatteryManagerPrototype]\" but got \"[object Object]\""
        },
        {
          "name": "BatteryManager interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute charging",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute chargingTime",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute dischargingTime",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute level",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onchargingchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onchargingtimechange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute ondischargingtimechange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onlevelchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager must be primary interface of navigator.getBattery()",
          "status": "FAIL",
          "message": "assert_equals: navigator.getBattery()'s prototype is not BatteryManager.prototype expected object \"[object Object]\" but got object \"[object Object]\""
        },
        {
          "name": "Stringification of navigator.getBattery()",
          "status": "FAIL",
          "message": "assert_equals: class string of navigator.getBattery() expected \"[object BatteryManager]\" but got \"[object Object]\""
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"charging\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"charging\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"chargingTime\" with the proper type (1)",
          "status": "FAIL",
          "message": "assert_inherits: property \"chargingTime\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"dischargingTime\" with the proper type (2)",
          "status": "FAIL",
          "message": "assert_inherits: property \"dischargingTime\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"level\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_inherits: property \"level\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"onchargingchange\" with the proper type (4)",
          "status": "FAIL",
          "message": "assert_inherits: property \"onchargingchange\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"onchargingtimechange\" with the proper type (5)",
          "status": "FAIL",
          "message": "assert_inherits: property \"onchargingtimechange\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"ondischargingtimechange\" with the proper type (6)",
          "status": "FAIL",
          "message": "assert_inherits: property \"ondischargingtimechange\" not found in prototype chain"
        },
        {
          "name": "BatteryManager interface: navigator.getBattery() must inherit property \"onlevelchange\" with the proper type (7)",
          "status": "FAIL",
          "message": "assert_inherits: property \"onlevelchange\" not found in prototype chain"
        },
        {
          "name": "EventTarget interface: navigator.getBattery() must inherit property \"addEventListener\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"addEventListener\" not found in prototype chain"
        },
        {
          "name": "EventTarget interface: calling addEventListener(DOMString,EventListener,boolean) on navigator.getBattery() with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_inherits: property \"addEventListener\" not found in prototype chain"
        },
        {
          "name": "EventTarget interface: navigator.getBattery() must inherit property \"removeEventListener\" with the proper type (1)",
          "status": "FAIL",
          "message": "assert_inherits: property \"removeEventListener\" not found in prototype chain"
        },
        {
          "name": "EventTarget interface: calling removeEventListener(DOMString,EventListener,boolean) on navigator.getBattery() with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_inherits: property \"removeEventListener\" not found in prototype chain"
        },
        {
          "name": "EventTarget interface: navigator.getBattery() must inherit property \"dispatchEvent\" with the proper type (2)",
          "status": "FAIL",
          "message": "assert_inherits: property \"dispatchEvent\" not found in prototype chain"
        },
        {
          "name": "EventTarget interface: calling dispatchEvent(Event) on navigator.getBattery() with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_inherits: property \"dispatchEvent\" not found in prototype chain"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-interface.html",
      "subtests": [
        {
          "name": "getBattery is present on navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "window has an own property BatteryManager",
          "status": "PASS",
          "message": null
        },
        {
          "name": "battery inherits from EventTarget",
          "status": "PASS",
          "message": null
        },
        {
          "name": "charging attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "charging attribute is readonly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "chargingTime attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "chargingTime attribute is readonly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "dischargingTime attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "dischargingTime attribute is readonly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "level attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "level attribute is readonly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange is null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange is set to function",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange: treat object as null",
          "status": "FAIL",
          "message": "assert_equals: onchargingchange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "onchargingchange: treat object with non-callable call property as null",
          "status": "FAIL",
          "message": "assert_equals: onchargingchange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "onchargingchange: treat string as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange: treat number as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange: treat undefined as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingchange: treat array as null",
          "status": "FAIL",
          "message": "assert_equals: onchargingchange did not treat noncallable (array) as null expected null but got []"
        },
        {
          "name": "onchargingtimechange attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingtimechange is null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingtimechange is set to function",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingtimechange: treat object as null",
          "status": "FAIL",
          "message": "assert_equals: onchargingtimechange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "onchargingtimechange: treat object with non-callable call property as null",
          "status": "FAIL",
          "message": "assert_equals: onchargingtimechange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "onchargingtimechange: treat string as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingtimechange: treat number as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingtimechange: treat undefined as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onchargingtimechange: treat array as null",
          "status": "FAIL",
          "message": "assert_equals: onchargingtimechange did not treat noncallable (array) as null expected null but got []"
        },
        {
          "name": "ondischargingtimechange attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ondischargingtimechange is null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ondischargingtimechange is set to function",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ondischargingtimechange: treat object as null",
          "status": "FAIL",
          "message": "assert_equals: ondischargingtimechange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "ondischargingtimechange: treat object with non-callable call property as null",
          "status": "FAIL",
          "message": "assert_equals: ondischargingtimechange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "ondischargingtimechange: treat string as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ondischargingtimechange: treat number as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ondischargingtimechange: treat undefined as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ondischargingtimechange: treat array as null",
          "status": "FAIL",
          "message": "assert_equals: ondischargingtimechange did not treat noncallable (array) as null expected null but got []"
        },
        {
          "name": "onlevelchange attribute exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onlevelchange is null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onlevelchange is set to function",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onlevelchange: treat object as null",
          "status": "FAIL",
          "message": "assert_equals: onlevelchange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "onlevelchange: treat object with non-callable call property as null",
          "status": "FAIL",
          "message": "assert_equals: onlevelchange did not treat noncallable as null expected null but got object \"[object Object]\""
        },
        {
          "name": "onlevelchange: treat string as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onlevelchange: treat number as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onlevelchange: treat undefined as null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onlevelchange: treat array as null",
          "status": "FAIL",
          "message": "assert_equals: onlevelchange did not treat noncallable (array) as null expected null but got []"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-promise.html",
      "subtests": [
        {
          "name": "navigator.getBattery() return BatteryManager",
          "status": "PASS",
          "message": null
        },
        {
          "name": "navigator.getBattery() shall always return the same promise",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-charging-manual.html",
      "subtests": [
        {
          "name": "Battery Test: battery neither empty or full, charger plugged in",
          "status": "FAIL",
          "message": "assert_less_than: chargingTime must be less than Infinity expected a number less than Infinity but got Infinity"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-created-manual.html",
      "subtests": [
        {
          "name": "When a BatteryManager object is created, charging must be set to true, chargingTime to 0, level to 1.0 and dischargingTime to the value positive Infinity, if the implementation is unable to report the battery's charging state, charging time, level or remaining time respectively.",
          "status": "FAIL",
          "message": "assert_equals: chargingTime must be set to 0 expected 0 but got Infinity"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-discharging-manual.html",
      "subtests": [
        {
          "name": "Battery Test: battery neither empty or full, charger unplugged in",
          "status": "FAIL",
          "message": "assert_false: charging must be set to false expected false got true"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-full-manual.html",
      "subtests": [
        {
          "name": "Battery Test: battery full, charger plugged in",
          "status": "FAIL",
          "message": "assert_equals: chargingTime must be set to 0 expected 0 but got Infinity"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-plugging-in-manual.html",
      "subtests": [],
      "status": "FAIL",
      "message": ""
    },
    {
      "test": "/battery-status/battery-unplugging-manual.html",
      "subtests": [],
      "status": "FAIL",
      "message": ""
    }
  ]
}