{
  "results": [
    {
      "test": "/battery-status/battery-interface-idlharness.html",
      "subtests": [
        {
          "name": "Battery test: IDL",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator interface: operation getBattery()",
          "status": "FAIL",
          "message": "assert_unreached: Throws \"TypeError: Illegal invocation\" instead of rejecting promise Reached unreachable code"
        },
        {
          "name": "Navigator must be primary interface of navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator interface: navigator must inherit property \"getBattery\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of BatteryManager.prototype expected \"[object BatteryManagerPrototype]\" but got \"[object Object]\""
        },
        {
          "name": "BatteryManager interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute charging",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute chargingTime",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute dischargingTime",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute level",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onchargingchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onchargingtimechange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute ondischargingtimechange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onlevelchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager must be primary interface of manager",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of manager",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"charging\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"chargingTime\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"dischargingTime\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"level\" with the proper type (3)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"onchargingchange\" with the proper type (4)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"onchargingtimechange\" with the proper type (5)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"ondischargingtimechange\" with the proper type (6)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"onlevelchange\" with the proper type (7)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: manager must inherit property \"addEventListener\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling addEventListener(DOMString,EventListener,boolean) on manager with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () {\n            fn.apply(obj, args);\n        }\" did not throw"
        },
        {
          "name": "EventTarget interface: manager must inherit property \"removeEventListener\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling removeEventListener(DOMString,EventListener,boolean) on manager with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () {\n            fn.apply(obj, args);\n        }\" did not throw"
        },
        {
          "name": "EventTarget interface: manager must inherit property \"dispatchEvent\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling dispatchEvent(Event) on manager with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-promise.html",
      "subtests": [
        {
          "name": "navigator.getBattery() return BatteryManager",
          "status": "PASS",
          "message": null
        },
        {
          "name": "navigator.getBattery() shall always return the same promise",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-charging-manual.html",
      "subtests": [
        {
          "name": "Battery Test: battery neither empty or full, charger plugged in",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-discharging-manual.html",
      "subtests": [
        {
          "name": "Battery Test: battery neither empty or full, charger unplugged in",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-full-manual.html",
      "subtests": [
        {
          "name": "Battery Test: battery full, charger plugged in",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}