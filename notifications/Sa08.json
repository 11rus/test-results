{
  "results": [
    {
      "test": "/notifications/Notification-permission.html",
      "subtests": [
        {
          "name": "Test checks that notification the value of permission is in array",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/event-onclose.html",
      "subtests": [
        {
          "name": "the notification.onclose event can be invoked",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/event-onshow.html",
      "subtests": [
        {
          "name": "the notification.onshow event can be invoked",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/instance.html",
      "subtests": [
        {
          "name": "Notification instance exists.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists: close",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists: onclick",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists: onshow",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists: onerror",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists: onclose",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists with expected value: title",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (string) \"Radio check\""
        },
        {
          "name": "Attribute exists with expected value: dir",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists with expected value: lang",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (string) \"aa\""
        },
        {
          "name": "Attribute exists with expected value: body",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (string) \"This is a radio check.\""
        },
        {
          "name": "Attribute exists with expected value: tag",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Attribute exists with expected value: icon",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (string) \"http://example.com/icon.png\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/interfaces.html",
      "subtests": [
        {
          "name": "Notification interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: class string of Notification expected \"[object Function]\" but got \"[object NotificationConstructor]\""
        },
        {
          "name": "Notification interface object length",
          "status": "FAIL",
          "message": "assert_true: Notification.length is not configurable expected true got false"
        },
        {
          "name": "Notification interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_false: Notification.prototype is enumerable expected false got true"
        },
        {
          "name": "Notification interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "FAIL",
          "message": "assert_true: Notification.prototype.constructor is not writable expected true got false"
        },
        {
          "name": "Notification interface: attribute permission",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: operation requestPermission(NotificationPermissionCallback)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: attribute onclick",
          "status": "FAIL",
          "message": "assert_throws: getting property on prototype object must throw TypeError function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "Notification interface: attribute onshow",
          "status": "FAIL",
          "message": "assert_throws: getting property on prototype object must throw TypeError function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "Notification interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_throws: getting property on prototype object must throw TypeError function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "Notification interface: attribute onclose",
          "status": "FAIL",
          "message": "assert_throws: getting property on prototype object must throw TypeError function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "Notification interface: attribute title",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"title\" expected true got false"
        },
        {
          "name": "Notification interface: attribute dir",
          "status": "FAIL",
          "message": "assert_throws: getting property on prototype object must throw TypeError function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "Notification interface: attribute lang",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"lang\" expected true got false"
        },
        {
          "name": "Notification interface: attribute body",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"body\" expected true got false"
        },
        {
          "name": "Notification interface: attribute tag",
          "status": "FAIL",
          "message": "assert_throws: getting property on prototype object must throw TypeError function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "Notification interface: attribute icon",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"icon\" expected true got false"
        },
        {
          "name": "Notification interface: operation close()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification must be primary interface of new Notification(\"foo\")",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of new Notification(\"foo\")",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"permission\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"requestPermission\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: calling requestPermission(NotificationPermissionCallback) on new Notification(\"foo\") with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"onclick\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"onshow\" with the proper type (3)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"onerror\" with the proper type (4)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"onclose\" with the proper type (5)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"title\" with the proper type (6)",
          "status": "FAIL",
          "message": "assert_inherits: property \"title\" not found in prototype chain"
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"dir\" with the proper type (7)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"lang\" with the proper type (8)",
          "status": "FAIL",
          "message": "assert_inherits: property \"lang\" not found in prototype chain"
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"body\" with the proper type (9)",
          "status": "FAIL",
          "message": "assert_inherits: property \"body\" not found in prototype chain"
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"tag\" with the proper type (10)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"icon\" with the proper type (11)",
          "status": "FAIL",
          "message": "assert_inherits: property \"icon\" not found in prototype chain"
        },
        {
          "name": "Notification interface: new Notification(\"foo\") must inherit property \"close\" with the proper type (12)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: new Notification(\"foo\") must inherit property \"addEventListener\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling addEventListener(DOMString,EventListener,boolean) on new Notification(\"foo\") with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "EventTarget interface: new Notification(\"foo\") must inherit property \"removeEventListener\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling removeEventListener(DOMString,EventListener,boolean) on new Notification(\"foo\") with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () {\n    [native code]\n}\" did not throw"
        },
        {
          "name": "EventTarget interface: new Notification(\"foo\") must inherit property \"dispatchEvent\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling dispatchEvent(Event) on new Notification(\"foo\") with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/notification-constructor-basic.html",
      "subtests": [
        {
          "name": "Test checks that notification constructor is correct",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/notification-constructor-invalid.html",
      "subtests": [
        {
          "name": "Test checks that notification constructor arguments can't be empty",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/notification-lang.html",
      "subtests": [
        {
          "name": "We have permission to use the notifications API.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Roundtripping lang \"\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"en\". Expecting \"en\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"en\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"en-US-x-hixie\". Expecting \"en-US-x-hixie\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"en-US-x-hixie\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-DE\". Expecting \"de-DE\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-DE\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-de\". Expecting \"de-de\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-de\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-De\". Expecting \"de-De\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-De\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-dE\". Expecting \"de-dE\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-dE\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-DE-1996\". Expecting \"de-DE-1996\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-DE-1996\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-Latn-DE\". Expecting \"de-Latn-DE\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-Latn-DE\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-Latf-DE\". Expecting \"de-Latf-DE\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-Latf-DE\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-Latn-DE-1996\". Expecting \"de-Latn-DE-1996\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-Latn-DE-1996\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"de-CH\". Expecting \"de-CH\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"de-CH\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"it-CH\". Expecting \"it-CH\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"it-CH\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"fr-CH\". Expecting \"fr-CH\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"fr-CH\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"rm-CH\". Expecting \"rm-CH\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"rm-CH\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"es-CH\". Expecting \"es-CH\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"es-CH\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"Latn-de\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"Latf-de\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"tic-tac-tac-toe\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"cocoa-1-bar\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"cocoa-a-bar\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"en-\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"en--\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"foo--bar\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"id---Java\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"fr-x\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"fr-xenomorph\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"fr-x-xenomorph\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"a\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"a-fr-lang\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"b-fr-lang\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"es1-KK-aa-bb-cc-dd\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"es2-KL-aa-bb-cc-dd\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"es3-KM-aa-bb-cc-dd\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"fooÉ\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"foöÉ-bÁr\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        },
        {
          "name": "Roundtripping lang \"foöÉbÁr\". Expecting \"\".",
          "status": "FAIL",
          "message": "assert_equals: notification.lang expected (string) \"\" but got (undefined) undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/Notification-requestPermission-denied-manual.html",
      "subtests": [
        {
          "name": "the notification the value of permission is denied",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/Notification-requestPermission-granted-manual.html",
      "subtests": [
        {
          "name": "the notification the value of permission is granted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/event-onclick-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/event-onerror-default-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/event-onerror-denied-manual.html",
      "subtests": [
        {
          "name": "the notification.onerror event can be invoked",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/notifications/notification-body-basic-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-body-empty-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-close-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-dir-auto-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-dir-ltr-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-dir-rtl-manual.html",
      "subtests": [],
      "status": "FAIL",
      "message": ""
    },
    {
      "test": "/notifications/notification-icon-basic-manual.html",
      "subtests": [],
      "status": "FAIL",
      "message": ""
    },
    {
      "test": "/notifications/notification-icon-empty-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-tag-different-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    },
    {
      "test": "/notifications/notification-tag-same-manual.html",
      "subtests": [],
      "status": "PASS",
      "message": ""
    }
  ]
}
