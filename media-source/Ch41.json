{
  "results": [
    {
      "test": "/media-source/SourceBuffer-abort-readyState.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\") : If the readyState attribute of the parent media source is not in the \"open\" state then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer#abort() (video/mp4) : If the readyState attribute of the parent media source is not in the \"open\" state then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/mp4 Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/SourceBuffer-abort-removed.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort (video/webm; codecs=\"vorbis,vp8\") : if this object has been removed from the sourceBuffers attribute of the parent media source, then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer#abort (video/mp4) : if this object has been removed from the sourceBuffers attribute of the parent media source, then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/mp4 Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/SourceBuffer-abort-updating.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\") : Check the algorithm when the updating attribute is true.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer#abort() (video/mp4) : Check the algorithm when the updating attribute is true.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/mp4 Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/SourceBuffer-abort.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\"): Check the values of appendWindowStart and appendWindowEnd.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer#abort() (video/mp4): Check the values of appendWindowStart and appendWindowEnd.",
          "status": "FAIL",
          "message": "assert_true: Browser doesn't support the MIME used in this test: video/mp4 expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/URL-createObjectURL-null.html",
      "subtests": [
        {
          "name": "URL.createObjectURL(null)",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.URL.createObjectURL(null);\n ...\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/URL-createObjectURL-revoke.html",
      "subtests": [
        {
          "name": "Check revoking behavior of URL.revokeObjectURL(url).",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/URL-createObjectURL.html",
      "subtests": [
        {
          "name": "URL.createObjectURL(mediaSource) should return a unique Blob URI.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/interfaces.html",
      "subtests": [
        {
          "name": "URL interface: operation createObjectURL(MediaSource)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "HTMLVideoElement interface: operation getVideoPlaybackQuality()",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getVideoPlaybackQuality\" missing"
        },
        {
          "name": "AudioTrack interface: attribute kind",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"AudioTrack\" expected property \"AudioTrack\" missing"
        },
        {
          "name": "AudioTrack interface: attribute language",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"AudioTrack\" expected property \"AudioTrack\" missing"
        },
        {
          "name": "AudioTrack interface: attribute sourceBuffer",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"AudioTrack\" expected property \"AudioTrack\" missing"
        },
        {
          "name": "VideoTrack interface: attribute kind",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoTrack\" expected property \"VideoTrack\" missing"
        },
        {
          "name": "VideoTrack interface: attribute language",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoTrack\" expected property \"VideoTrack\" missing"
        },
        {
          "name": "VideoTrack interface: attribute sourceBuffer",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoTrack\" expected property \"VideoTrack\" missing"
        },
        {
          "name": "TextTrack interface: attribute kind",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"kind\" expected true got false"
        },
        {
          "name": "TextTrack interface: attribute language",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"language\" expected true got false"
        },
        {
          "name": "TextTrack interface: attribute sourceBuffer",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"sourceBuffer\" expected true got false"
        },
        {
          "name": "MediaSource interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of window's property \"MediaSource\" is not Function.prototype expected function \"function Empty() {}\" but got function \"function EventTarget() { [native code] }\""
        },
        {
          "name": "MediaSource interface object length",
          "status": "FAIL",
          "message": "assert_true: MediaSource.length is not configurable expected true got false"
        },
        {
          "name": "MediaSource interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of MediaSource.prototype expected \"[object MediaSourcePrototype]\" but got \"[object Object]\""
        },
        {
          "name": "MediaSource interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: attribute sourceBuffers",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"sourceBuffers\" expected true got false"
        },
        {
          "name": "MediaSource interface: attribute activeSourceBuffers",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"activeSourceBuffers\" expected true got false"
        },
        {
          "name": "MediaSource interface: attribute readyState",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"readyState\" expected true got false"
        },
        {
          "name": "MediaSource interface: attribute duration",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"duration\" expected true got false"
        },
        {
          "name": "MediaSource interface: operation addSourceBuffer(DOMString)",
          "status": "FAIL",
          "message": "assert_true: property is not configurable expected true got false"
        },
        {
          "name": "MediaSource interface: operation removeSourceBuffer(SourceBuffer)",
          "status": "FAIL",
          "message": "assert_true: property is not configurable expected true got false"
        },
        {
          "name": "MediaSource interface: operation endOfStream(EndOfStreamError)",
          "status": "FAIL",
          "message": "assert_true: property is not configurable expected true got false"
        },
        {
          "name": "MediaSource interface: operation isTypeSupported(DOMString)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource must be primary interface of mediaSource",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of mediaSource",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"sourceBuffers\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"sourceBuffers\" found on object expected in prototype chain"
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"activeSourceBuffers\" with the proper type (1)",
          "status": "FAIL",
          "message": "assert_inherits: property \"activeSourceBuffers\" found on object expected in prototype chain"
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"readyState\" with the proper type (2)",
          "status": "FAIL",
          "message": "assert_inherits: property \"readyState\" found on object expected in prototype chain"
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"duration\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_inherits: property \"duration\" found on object expected in prototype chain"
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"addSourceBuffer\" with the proper type (4)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: calling addSourceBuffer(DOMString) on mediaSource with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"removeSourceBuffer\" with the proper type (5)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: calling removeSourceBuffer(SourceBuffer) on mediaSource with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"endOfStream\" with the proper type (6)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: calling endOfStream(EndOfStreamError) on mediaSource with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: mediaSource must inherit property \"isTypeSupported\" with the proper type (7)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaSource interface: calling isTypeSupported(DOMString) on mediaSource with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: mediaSource must inherit property \"addEventListener\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling addEventListener(DOMString,EventListener,boolean) on mediaSource with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () { [native code] }\" did not throw"
        },
        {
          "name": "EventTarget interface: mediaSource must inherit property \"removeEventListener\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling removeEventListener(DOMString,EventListener,boolean) on mediaSource with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () { [native code] }\" did not throw"
        },
        {
          "name": "EventTarget interface: mediaSource must inherit property \"dispatchEvent\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling dispatchEvent(Event) on mediaSource with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface object length",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute mode",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute updating",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute buffered",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute timestampOffset",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute audioTracks",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute videoTracks",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute textTracks",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute appendWindowStart",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: attribute appendWindowEnd",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: operation appendBuffer(ArrayBuffer)",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: operation appendBuffer(ArrayBufferView)",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: operation appendStream(Stream,unsigned long long)",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: operation abort()",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer interface: operation remove(double,double)",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "SourceBuffer must be primary interface of sourceBuffer",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBuffer\" expected property \"SourceBuffer\" missing"
        },
        {
          "name": "Stringification of sourceBuffer",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"mode\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"mode\" not found in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"updating\" with the proper type (1)",
          "status": "FAIL",
          "message": "assert_inherits: property \"updating\" found on object expected in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"buffered\" with the proper type (2)",
          "status": "FAIL",
          "message": "assert_inherits: property \"buffered\" found on object expected in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"timestampOffset\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_inherits: property \"timestampOffset\" found on object expected in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"audioTracks\" with the proper type (4)",
          "status": "FAIL",
          "message": "assert_inherits: property \"audioTracks\" not found in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"videoTracks\" with the proper type (5)",
          "status": "FAIL",
          "message": "assert_inherits: property \"videoTracks\" not found in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"textTracks\" with the proper type (6)",
          "status": "FAIL",
          "message": "assert_inherits: property \"textTracks\" not found in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"appendWindowStart\" with the proper type (7)",
          "status": "FAIL",
          "message": "assert_inherits: property \"appendWindowStart\" found on object expected in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"appendWindowEnd\" with the proper type (8)",
          "status": "FAIL",
          "message": "assert_inherits: property \"appendWindowEnd\" found on object expected in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"appendBuffer\" with the proper type (9)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: calling appendBuffer(ArrayBuffer) on sourceBuffer with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"appendBuffer\" with the proper type (10)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: calling appendBuffer(ArrayBufferView) on sourceBuffer with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"appendStream\" with the proper type (11)",
          "status": "FAIL",
          "message": "assert_inherits: property \"appendStream\" not found in prototype chain"
        },
        {
          "name": "SourceBuffer interface: calling appendStream(Stream,unsigned long long) on sourceBuffer with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_inherits: property \"appendStream\" not found in prototype chain"
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"abort\" with the proper type (12)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: sourceBuffer must inherit property \"remove\" with the proper type (13)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBuffer interface: calling remove(double,double) on sourceBuffer with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: sourceBuffer must inherit property \"addEventListener\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling addEventListener(DOMString,EventListener,boolean) on sourceBuffer with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () { [native code] }\" did not throw"
        },
        {
          "name": "EventTarget interface: sourceBuffer must inherit property \"removeEventListener\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling removeEventListener(DOMString,EventListener,boolean) on sourceBuffer with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () { [native code] }\" did not throw"
        },
        {
          "name": "EventTarget interface: sourceBuffer must inherit property \"dispatchEvent\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling dispatchEvent(Event) on sourceBuffer with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBufferList interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBufferList\" expected property \"SourceBufferList\" missing"
        },
        {
          "name": "SourceBufferList interface object length",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBufferList\" expected property \"SourceBufferList\" missing"
        },
        {
          "name": "SourceBufferList interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBufferList\" expected property \"SourceBufferList\" missing"
        },
        {
          "name": "SourceBufferList interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBufferList\" expected property \"SourceBufferList\" missing"
        },
        {
          "name": "SourceBufferList interface: attribute length",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBufferList\" expected property \"SourceBufferList\" missing"
        },
        {
          "name": "SourceBufferList must be primary interface of mediaSource.sourceBuffers",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"SourceBufferList\" expected property \"SourceBufferList\" missing"
        },
        {
          "name": "Stringification of mediaSource.sourceBuffers",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SourceBufferList interface: mediaSource.sourceBuffers must inherit property \"length\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"length\" found on object expected in prototype chain"
        },
        {
          "name": "EventTarget interface: mediaSource.sourceBuffers must inherit property \"addEventListener\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling addEventListener(DOMString,EventListener,boolean) on mediaSource.sourceBuffers with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () { [native code] }\" did not throw"
        },
        {
          "name": "EventTarget interface: mediaSource.sourceBuffers must inherit property \"removeEventListener\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling removeEventListener(DOMString,EventListener,boolean) on mediaSource.sourceBuffers with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Called with 0 arguments function \"function () { [native code] }\" did not throw"
        },
        {
          "name": "EventTarget interface: mediaSource.sourceBuffers must inherit property \"dispatchEvent\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "EventTarget interface: calling dispatchEvent(Event) on mediaSource.sourceBuffers with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "VideoPlaybackQuality interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface object length",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: attribute creationTime",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: attribute totalVideoFrames",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: attribute droppedVideoFrames",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: attribute corruptedVideoFrames",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality interface: attribute totalFrameDelay",
          "status": "FAIL",
          "message": "assert_own_property: window does not have own property \"VideoPlaybackQuality\" expected property \"VideoPlaybackQuality\" missing"
        },
        {
          "name": "VideoPlaybackQuality must be primary interface of video.getVideoPlaybackQuality()",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        },
        {
          "name": "Stringification of video.getVideoPlaybackQuality()",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        },
        {
          "name": "VideoPlaybackQuality interface: video.getVideoPlaybackQuality() must inherit property \"creationTime\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        },
        {
          "name": "VideoPlaybackQuality interface: video.getVideoPlaybackQuality() must inherit property \"totalVideoFrames\" with the proper type (1)",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        },
        {
          "name": "VideoPlaybackQuality interface: video.getVideoPlaybackQuality() must inherit property \"droppedVideoFrames\" with the proper type (2)",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        },
        {
          "name": "VideoPlaybackQuality interface: video.getVideoPlaybackQuality() must inherit property \"corruptedVideoFrames\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        },
        {
          "name": "VideoPlaybackQuality interface: video.getVideoPlaybackQuality() must inherit property \"totalFrameDelay\" with the proper type (4)",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: undefined is not a function\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-addsourcebuffer.html",
      "subtests": [
        {
          "name": "Test addSourceBuffer() with empty type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with unsupported type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with Vorbis and VP8",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with Vorbis and VP8 in separate SourceBuffers",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with AAC and H.264",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with AAC and H.264 in separate SourceBuffers",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-append-buffer.html",
      "subtests": [
        {
          "name": "Test SourceBuffer.appendBuffer() event dispatching.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test SourceBuffer.appendBuffer() call during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test SourceBuffer.abort() call during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test SourceBuffer.appendBuffer() triggering an 'ended' to 'open' transition.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test MediaSource.removeSourceBuffer() call during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set MediaSource.duration during a pending appendBuffer() for one of its SourceBuffers.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test MediaSource.endOfStream() during a pending appendBuffer() for one of its SourceBuffers.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set SourceBuffer.timestampOffset during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test appending an empty ArrayBufferView.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test appending an empty ArrayBuffer.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-appendwindow.html",
      "subtests": [
        {
          "name": "Test correctly reset appendWindowStart and appendWindowEnd values",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set wrong values to appendWindowStart and appendWindowEnd.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test appendwindow throw error when mediasource object is not associated with a sourebuffer.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set appendWindowStart and appendWindowEnd when source buffer updating.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test appendWindowStart and appendWindowEnd value after a sourceBuffer.abort().",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-buffered.html",
      "subtests": [
        {
          "name": "Demuxed content with different lengths",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Muxed tracks with different lengths",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Demuxed content with an empty buffered range on one SourceBuffer",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Muxed content empty buffered ranges.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-closed.html",
      "subtests": [
        {
          "name": "Test attribute values on a closed MediaSource object.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() while closed.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test removeSourceBuffer() while closed.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test endOfStream() while closed.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test setting duration while closed.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-a-bitrate.html",
      "subtests": [
        {
          "name": "Tests mp4 audio-only bitrate changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-av-audio-bitrate.html",
      "subtests": [
        {
          "name": "Tests mp4 audio bitrate changes in multiplexed content.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-av-framesize.html",
      "subtests": [
        {
          "name": "Tests mp4 frame size changes in multiplexed content.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-av-video-bitrate.html",
      "subtests": [
        {
          "name": "Tests mp4 video bitrate changes in multiplexed content.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-v-bitrate.html",
      "subtests": [
        {
          "name": "Tests mp4 video-only bitrate changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-v-framerate.html",
      "subtests": [
        {
          "name": "Tests mp4 video-only frame rate changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-v-framesize.html",
      "subtests": [
        {
          "name": "Tests mp4 video-only frame size changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-a-bitrate.html",
      "subtests": [
        {
          "name": "Tests webm audio-only bitrate changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-av-audio-bitrate.html",
      "subtests": [
        {
          "name": "Tests webm audio bitrate changes in multiplexed content.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-av-framesize.html",
      "subtests": [
        {
          "name": "Tests webm frame size changes in multiplexed content.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-av-video-bitrate.html",
      "subtests": [
        {
          "name": "Tests webm video bitrate changes in multiplexed content.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-v-bitrate.html",
      "subtests": [
        {
          "name": "Tests webm video-only bitrate changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-v-framerate.html",
      "subtests": [
        {
          "name": "Tests webm video-only frame rate changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-config-change-webm-v-framesize.html",
      "subtests": [
        {
          "name": "Tests webm video-only frame size changes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-duration.html",
      "subtests": [
        {
          "name": "Test seek starts on duration truncation below currentTime",
          "status": "FAIL",
          "message": "assert_true: Seeking after setting truncatedDuration expected true got false"
        },
        {
          "name": "Test appendBuffer completes previous seek to truncated duration",
          "status": "FAIL",
          "message": "assert_true: Seeking after setting truncatedDuration expected true got false"
        },
        {
          "name": "Test endOfStream completes previous seek to truncated duration",
          "status": "FAIL",
          "message": "assert_true: Seeking after setting truncatedDuration expected true got false"
        },
        {
          "name": "Test setting same duration multiple times does not fire duplicate durationchange",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-endofstream-invaliderror.html",
      "subtests": [
        {
          "name": "Test MediaSource.endOfStream() with invalid non-empty error string.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test MediaSource.endOfStream() with invalid empty error string.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test MediaSource.endOfStream() with invalid null error parameter.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-getvideoplaybackquality.html",
      "subtests": [
        {
          "name": "Test HTMLVideoElement.getVideoPlaybackQuality() with MediaSource API",
          "status": "FAIL",
          "message": "undefined is not a function(stack: TypeError: undefined is not a function\n    at mediasource_testafterdataloaded.timeout (http://w3c-test.org/media-source/mediasource-getvideoplaybackquality.html:14:50)\n    at http://w3c-test.org/media-source/mediasource-util.js:411:17\n    at Object.<anonymous> (http://w3c-test.org/media-source/mediasource-util.js:150:13)\n    at Object.Test.step (http://w3c-test.org/resources/testharness.js:798:25)\n    at XMLHttpRequest.<anonymous> (http://w3c-test.org/resources/testharness.js:827:35))"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-is-type-supported.html",
      "subtests": [
        {
          "name": "Test invalid MIME format \"video\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm;\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm;codecs\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm;codecs=\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm;codecs=\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm;codecs=\"\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid MIME format \"video/webm;codecs=\",\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between major type and codec ID \"audio/webm;codecs=\"vp8\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between major type and codec ID \"audio/mp4;codecs=\"avc1.4d001e\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between minor type and codec ID \"audio/mp4;codecs=\"vorbis\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between minor type and codec ID \"audio/webm;codecs=\"mp4a.40.2\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between minor type and codec ID \"video/mp4;codecs=\"vp8\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between minor type and codec ID \"video/webm;codecs=\"mp4a.40.2\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between minor type and codec ID \"video/mp4;codecs=\"vorbis\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid mismatch between minor type and codec ID \"video/webm;codecs=\"mp4a.40.2\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid codec ID \"audio/mp4;codecs=\"mp4a\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid codec ID \"audio/mp4;codecs=\"mp4a.40\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid codec ID \"audio/mp4;codecs=\"mp4a.40.\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test invalid codec ID \"audio/mp4;codecs=\"mp4a.67.3\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid WebM type \"video/webm;codecs=\"vp8\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid WebM type \"video/webm;codecs=\"vorbis\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid WebM type \"video/webm;codecs=\"vp8,vorbis\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid WebM type \"video/webm;codecs=\"vorbis, vp8\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid WebM type \"audio/webm;codecs=\"vorbis\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"video/mp4;codecs=\"avc1.4d001e\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"video/mp4;codecs=\"avc1.42001e\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"audio/mp4;codecs=\"mp4a.40.2\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"audio/mp4;codecs=\"mp4a.40.5\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"audio/mp4;codecs=\"mp4a.67\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"video/mp4;codecs=\"mp4a.40.2\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"video/mp4;codecs=\"avc1.4d001e,mp4a.40.2\"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"video/mp4;codecs=\"mp4a.40.2 , avc1.4d001e \"\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test valid MP4 type \"video/mp4;codecs=\"avc1.4d001e,mp4a.40.5\"\"",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-multiple-attach.html",
      "subtests": [
        {
          "name": "Test exactly one succeeds when two MediaElements attach to same MediaSource",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test that MediaSource can reattach if closed first",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-play-then-seek-back.html",
      "subtests": [
        {
          "name": "Test playing then seeking back.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-play.html",
      "subtests": [
        {
          "name": "Test normal playback case with MediaSource API",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-redundant-seek.html",
      "subtests": [
        {
          "name": "Test redundant fully prebuffered seek",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-remove.html",
      "subtests": [
        {
          "name": "Test remove with an negative start.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test remove with a start beyond the duration.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test remove with a start larger than the end.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test remove after SourceBuffer removed from mediaSource.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test remove while update pending.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test aborting a remove operation.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test remove transitioning readyState from 'ended' to 'open'.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test removing all appended data.",
          "status": "FAIL",
          "message": "assert_equals: Initial buffered range. expected \"{ [0.000, 6.076) }\" but got \"{ [0.000, 6.042) }\""
        },
        {
          "name": "Test removing beginning of appended data.",
          "status": "FAIL",
          "message": "assert_equals: Initial buffered range. expected \"{ [0.000, 6.076) }\" but got \"{ [0.000, 6.042) }\""
        },
        {
          "name": "Test removing the middle of appended data.",
          "status": "FAIL",
          "message": "assert_equals: Initial buffered range. expected \"{ [0.000, 6.076) }\" but got \"{ [0.000, 6.042) }\""
        },
        {
          "name": "Test removing the end of appended data.",
          "status": "FAIL",
          "message": "assert_equals: Initial buffered range. expected \"{ [0.000, 6.076) }\" but got \"{ [0.000, 6.042) }\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-seek-beyond-duration.html",
      "subtests": [
        {
          "name": "Test seeking beyond updated media duration.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test seeking beyond media duration.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-seek-during-pending-seek.html",
      "subtests": [
        {
          "name": "Test seeking to a new location before transitioning beyond HAVE_METADATA.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test seeking to a new location during a pending seek.",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "ERROR",
      "message": "Uncaught TypeError: Cannot read property 'offset' of undefined"
    },
    {
      "test": "/media-source/mediasource-sourcebuffer-mode.html",
      "subtests": [
        {
          "name": "Test initial value of SourceBuffer.mode is \"segments\"",
          "status": "FAIL",
          "message": "assert_equals: default append mode should be 'segments' expected (string) \"segments\" but got (undefined) undefined"
        },
        {
          "name": "Test setting SourceBuffer.mode",
          "status": "FAIL",
          "message": "assert_equals: mode unchanged by attempts to set invalid modes expected \"sequence\" but got \"Segments\""
        },
        {
          "name": "Test setting a removed SourceBuffer's mode",
          "status": "FAIL",
          "message": "assert_throws: Setting valid sourceBuffer.mode on removed SourceBuffer should throw InvalidStateError. function \"function () { sourceBuffer.mode = 'segments'; }\" did not throw"
        },
        {
          "name": "Test setting SourceBuffer.mode while still updating",
          "status": "FAIL",
          "message": "assert_throws: Setting valid sourceBuffer.mode on updating SourceBuffer threw InvalidStateError. function \"function () { sourceBuffer.mode = 'segments'; }\" did not throw"
        },
        {
          "name": "Test setting SourceBuffer.mode triggers parent MediaSource 'ended' to 'open' transition.",
          "status": "FAIL",
          "message": "assert_equals: MediaSource readyState is 'open' expected \"open\" but got \"ended\""
        },
        {
          "name": "Test setting SourceBuffer.mode and SourceBuffer.timestampOffset while parsing media segment.",
          "status": "FAIL",
          "message": "assert_equals: expected (string) \"segments\" but got (undefined) undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-sourcebufferlist.html",
      "subtests": [
        {
          "name": "Test SourceBufferList event dispatching.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test that only 1 removesourcebuffer event fires on each SourceBufferList when the MediaSource closes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}