{
  "results": [
    {
      "test": "/media-source/SourceBuffer-abort-readyState.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\") : If the readyState attribute of the parent media source is not in the \"open\" state then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/webm; codecs=\"vorbis,vp8\" Reached unreachable code"
        },
        {
          "name": "SourceBuffer#abort() (video/mp4) : If the readyState attribute of the parent media source is not in the \"open\" state then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/SourceBuffer-abort-removed.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort (video/webm; codecs=\"vorbis,vp8\") : if this object has been removed from the sourceBuffers attribute of the parent media source, then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/webm; codecs=\"vorbis,vp8\" Reached unreachable code"
        },
        {
          "name": "SourceBuffer#abort (video/mp4) : if this object has been removed from the sourceBuffers attribute of the parent media source, then throw an INVALID_STATE_ERR exception and abort these steps.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/SourceBuffer-abort-updating.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\") : Check the algorithm when the updating attribute is true.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/webm; codecs=\"vorbis,vp8\" Reached unreachable code"
        },
        {
          "name": "SourceBuffer#abort() (video/mp4) : Check the algorithm when the updating attribute is true.",
          "status": "FAIL",
          "message": "assert_array_equals: Check the sequence of fired events. lengths differ, expected 3 got 1"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/SourceBuffer-abort.html",
      "subtests": [
        {
          "name": "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\"): Check the values of appendWindowStart and appendWindowEnd.",
          "status": "FAIL",
          "message": "assert_unreached: Browser doesn't support the MIME used in this test: video/webm; codecs=\"vorbis,vp8\" Reached unreachable code"
        },
        {
          "name": "SourceBuffer#abort() (video/mp4): Check the values of appendWindowStart and appendWindowEnd.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/URL-createObjectURL-null.html",
      "subtests": [
        {
          "name": "URL.createObjectURL(null)",
          "status": "FAIL",
          "message": "assert_throws: function \"function() {\n        window.URL.createObjectURL(null);\n    }\" threw object \"Error: Cette interface nâ€™est pas prise en charge\r\n\" (\"Error\") expected object \"TypeError\" (\"TypeError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/URL-createObjectURL-revoke.html",
      "subtests": [
        {
          "name": "Check revoking behavior of URL.revokeObjectURL(url).",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/URL-createObjectURL.html",
      "subtests": [
        {
          "name": "URL.createObjectURL(mediaSource) should return a unique Blob URI.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/interfaces.html",
      "subtests": [
        {
          "name": "URL interface: operation createObjectURL(MediaSource)",
          "status": "FAIL",
          "message": "assert_own_property: interface \"URL\" does not have own property \"prototype\" expected property \"prototype\" missing"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-addsourcebuffer.html",
      "subtests": [
        {
          "name": "Test addSourceBuffer() with empty type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with unsupported type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with Vorbis and VP8",
          "status": "FAIL",
          "message": "assert_true: video/webm;codecs=\"vp8,vorbis\" is supported expected true got false"
        },
        {
          "name": "Test addSourceBuffer() with Vorbis and VP8 in separate SourceBuffers",
          "status": "FAIL",
          "message": "assert_true: video/webm;codecs=\"vp8\" is supported expected true got false"
        },
        {
          "name": "Test addSourceBuffer() with AAC and H.264",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test addSourceBuffer() with AAC and H.264 in separate SourceBuffers",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-append-buffer.html",
      "subtests": [
        {
          "name": "Test SourceBuffer.appendBuffer() event dispatching.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test SourceBuffer.appendBuffer() call during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test SourceBuffer.abort() call during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test SourceBuffer.appendBuffer() triggering an 'ended' to 'open' transition.",
          "status": "FAIL",
          "message": "assert_true: updating attribute is true expected true got false"
        },
        {
          "name": "Test MediaSource.removeSourceBuffer() call during a pending appendBuffer().",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "Test set MediaSource.duration during a pending appendBuffer() for one of its SourceBuffers.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test MediaSource.endOfStream() during a pending appendBuffer() for one of its SourceBuffers.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set SourceBuffer.timestampOffset during a pending appendBuffer().",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test appending an empty ArrayBufferView.",
          "status": "FAIL",
          "message": "assert_true: updating attribute is true expected true got false"
        },
        {
          "name": "Test appending an empty ArrayBuffer.",
          "status": "FAIL",
          "message": "assert_true: updating attribute is true expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-appendwindow.html",
      "subtests": [
        {
          "name": "Test correctly reset appendWindowStart and appendWindowEnd values",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set wrong values to appendWindowStart and appendWindowEnd.",
          "status": "FAIL",
          "message": "assert_throws: set appendWindowStart throws an exception for Number.NEGATIVE_INFINITY. function \"function() { sourceBuffer.appendWindowStart = Number.NEGA...\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Test appendwindow throw error when mediasource object is not associated with a sourebuffer.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test set appendWindowStart and appendWindowEnd when source buffer updating.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test appendWindowStart and appendWindowEnd value after a sourceBuffer.abort().",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-buffered.html",
      "subtests": [
        {
          "name": "Demuxed content with different lengths",
          "status": "FAIL",
          "message": "assert_equals: mediaSource.activeSourceBuffers[0] expected \"{ [0.000, 2.043) }\" but got \"{ }\""
        },
        {
          "name": "Muxed tracks with different lengths",
          "status": "FAIL",
          "message": "assert_equals: mediaSource.activeSourceBuffers[0] expected \"{ [0.000, 2.000) }\" but got \"{ }\""
        },
        {
          "name": "Demuxed content with an empty buffered range on one SourceBuffer",
          "status": "FAIL",
          "message": "assert_equals: mediaSource.activeSourceBuffers[0] expected \"{ [0.000, 2.043) }\" but got \"{ }\""
        },
        {
          "name": "Muxed content empty buffered ranges.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/media-source/mediasource-closed.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-a-bitrate.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-av-audio-bitrate.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/media-source/mediasource-config-change-mp4-av-framesize.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    }
  ]
}