{
  "results": [
    {
      "test": "/payment-request/MerchantValidationEvent/complete-method.https.html",
      "subtests": [
        {
          "name": "If event's isTrusted attribute is false, then then throw an InvalidStateError DOMException.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/MerchantValidationEvent/constructor.http.html",
      "subtests": [
        {
          "name": "MerchantValidationEvent constructor must not be exposed in insecure context",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/MerchantValidationEvent/constructor.https.html",
      "subtests": [
        {
          "name": "MerchantValidationEvent can be constructed in secure-context.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "MerchantValidationEvent can be constructed with an EventInitDict, even if not trusted.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "MerchantValidationEvent can be dispatched, even if not trusted.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "Must have a validationURL IDL attribute, which is initialized with to the validationURL dictionary value.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "Must throw TypeError if initialized with an invalid URL.",
          "status": "FAIL",
          "message": "assert_throws: function \"() => {\n    new MerchantValidationEvent(\"test\", { validationURL });\n  }\" threw object \"ReferenceError: 'MerchantValidationEvent' is not defined\" (\"ReferenceError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Relative validationURLs use the document as the base.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "Must have a methodName IDL attribute, which is initialized with to the methodName dictionary value.",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "When no methodName is passed, methodName attribute defaults to the empty string",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "MerchantValidationEvent can be constructed with valid PMIs",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "MerchantValidationEvent can't be constructed with invalid PMIs",
          "status": "FAIL",
          "message": "assert_throws: expected to throw when constructed with invalid PMI: 'basic-ðŸ’³' function \"() => {\n        const event = new MerchantValidationEvent(\"test\", { methodName });\n      }\" threw object \"ReferenceError: 'MerchantValidationEvent' is not defined\" (\"ReferenceError\") expected object \"RangeError\" (\"RangeError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/PaymentMethodChangeEvent/methodDetails-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a methodDetails IDL attribute, which is initialized with to the methodName dictionary value",
          "status": "FAIL",
          "message": "'PaymentMethodChangeEvent' is not defined"
        },
        {
          "name": "The methodDetails member defaults to null",
          "status": "FAIL",
          "message": "'PaymentMethodChangeEvent' is not defined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/PaymentMethodChangeEvent/methodName-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a methodName IDL attribute, which is initialized with to the methodName dictionary value",
          "status": "FAIL",
          "message": "'PaymentMethodChangeEvent' is not defined"
        },
        {
          "name": "When no dictionary is passed, the methodName member defaults to the empty string",
          "status": "FAIL",
          "message": "'PaymentMethodChangeEvent' is not defined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/PaymentRequestUpdateEvent/constructor.http.html",
      "subtests": [
        {
          "name": "PaymentRequestUpdateEvent constructor must not be exposed in insecure context",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/PaymentRequestUpdateEvent/constructor.https.html",
      "subtests": [
        {
          "name": "PaymentRequestUpdateEvent can be constructed in secure-context",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent can be constructed with an EventInitDict, even if not trusted",
          "status": "FAIL",
          "message": "assert_true: set by EventInitDict expected true got undefined"
        },
        {
          "name": "PaymentRequestUpdateEvent can be dispatched, even if not trusted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/PaymentRequestUpdateEvent/updatewith-method.https.html",
      "subtests": [
        {
          "name": "Let target be the request which is dispatching the event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Calling .updateWith() with an undispatched untrusted event throws \"InvalidStateError\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Calling .updateWith() with a dispatched, untrusted event, throws \"InvalidStateError\"",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/active-document-cross-origin.https.sub.html",
      "subtests": [
        {
          "name": "PaymentRequest <iframe allowpaymentrequest> in non-active document (cross-origin)",
          "status": "FAIL",
          "message": "assert_throws: function \"() => {\n        new grabbedPaymentRequest(...paymentArgs);\n      }\" threw object \"Error: Can't execute code from a freed script\" (\"Error\") expected object \"[object Object]\" (\"SecurityError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/active-document-same-origin.https.html",
      "subtests": [
        {
          "name": "PaymentRequest <iframe allowpaymentrequest> in non-active document (same-origin)",
          "status": "FAIL",
          "message": "assert_throws: function \"() => {\n        new grabbedPaymentRequest(...paymentArgs);\n      }\" threw object \"Error: Can't execute code from a freed script\" (\"Error\") expected object \"[object Object]\" (\"SecurityError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/allowpaymentrequest-attribute-cross-origin-bc-containers.https.html",
      "subtests": [
        {
          "name": "iframe",
          "status": "PASS",
          "message": null
        },
        {
          "name": "frame",
          "status": "PASS",
          "message": null
        },
        {
          "name": "object",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        },
        {
          "name": "embed",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/allowpaymentrequest-attribute-same-origin-bc-containers.https.html",
      "subtests": [
        {
          "name": "iframe",
          "status": "PASS",
          "message": null
        },
        {
          "name": "frame",
          "status": "PASS",
          "message": null
        },
        {
          "name": "object",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        },
        {
          "name": "embed",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/basic.https.html",
      "subtests": [
        {
          "name": "PaymentRequest <iframe allowpaymentrequest> basic",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/no-attribute-cross-origin-bc-containers.https.html",
      "subtests": [
        {
          "name": "iframe",
          "status": "PASS",
          "message": null
        },
        {
          "name": "frame",
          "status": "PASS",
          "message": null
        },
        {
          "name": "object",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        },
        {
          "name": "embed",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/no-attribute-same-origin-bc-containers.https.html",
      "subtests": [
        {
          "name": "iframe",
          "status": "PASS",
          "message": null
        },
        {
          "name": "frame",
          "status": "PASS",
          "message": null
        },
        {
          "name": "object",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        },
        {
          "name": "embed",
          "status": "FAIL",
          "message": "Unable to get property 'postMessage' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/removing-allowpaymentrequest.https.sub.html",
      "subtests": [
        {
          "name": "PaymentRequest removing allowpaymentrequest after load and then navigating",
          "status": "FAIL",
          "message": "assert_equals: before navigation expected \"Success\" but got \"Exception\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/setting-allowpaymentrequest-timing.https.sub.html",
      "subtests": [
        {
          "name": "PaymentRequest setting allowpaymentrequest after document creation, before response",
          "status": "FAIL",
          "message": "assert_equals: expected \"Exception\" but got \"Success\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/allowpaymentrequest/setting-allowpaymentrequest.https.sub.html",
      "subtests": [
        {
          "name": "PaymentRequest setting allowpaymentrequest after load and then navigating",
          "status": "FAIL",
          "message": "assert_equals: before navigation expected \"Exception\" but got \"Success\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/historical.https.html",
      "subtests": [
        {
          "name": "paymentRequestID in PaymentRequest",
          "status": "PASS",
          "message": null
        },
        {
          "name": "paymentRequestID in PaymentResponse",
          "status": "PASS",
          "message": null
        },
        {
          "name": "careOf in PaymentAddress",
          "status": "PASS",
          "message": null
        },
        {
          "name": "totalAmount in PaymentResponse",
          "status": "PASS",
          "message": null
        },
        {
          "name": "paymentRequestId in PaymentRequest",
          "status": "PASS",
          "message": null
        },
        {
          "name": "paymentRequestId in PaymentResponse",
          "status": "PASS",
          "message": null
        },
        {
          "name": "supportedMethods must not support sequence<DOMString>",
          "status": "FAIL",
          "message": "assert_throws: function \"() => {\n    new PaymentRequest([{supportedMethods: methods}], {total: {label: 'bar', amount: {currency: 'BAZ', value: '0'}}});\n  }\" threw object \"Error: Could not complete the operation due to error 80020101.\" (\"Error\") expected object \"[object Object]\" (\"toString should be called\")"
        }
      ],
      "status": "ERROR",
      "message": "[object Object]"
    },
    {
      "test": "/payment-request/idlharness.https.window.html",
      "subtests": [
        {
          "name": "idl_test setup",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of PaymentRequest is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "PaymentRequest interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: operation show([object Object])",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: operation abort()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: operation canMakePayment()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: attribute id",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get id' expected \"get id\" but got \"id\""
        },
        {
          "name": "PaymentRequest interface: attribute shippingAddress",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get shippingAddress' expected \"get shippingAddress\" but got \"shippingAddress\""
        },
        {
          "name": "PaymentRequest interface: attribute shippingOption",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get shippingOption' expected \"get shippingOption\" but got \"shippingOption\""
        },
        {
          "name": "PaymentRequest interface: attribute shippingType",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get shippingType' expected \"get shippingType\" but got \"shippingType\""
        },
        {
          "name": "PaymentRequest interface: attribute onmerchantvalidation",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onmerchantvalidation\" expected true got false"
        },
        {
          "name": "PaymentRequest interface: attribute onshippingaddresschange",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get onshippingaddresschange' expected \"get onshippingaddresschange\" but got \"onshippingaddresschange\""
        },
        {
          "name": "PaymentRequest interface: attribute onshippingoptionchange",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get onshippingoptionchange' expected \"get onshippingoptionchange\" but got \"onshippingoptionchange\""
        },
        {
          "name": "PaymentRequest interface: attribute onpaymentmethodchange",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onpaymentmethodchange\" expected true got false"
        },
        {
          "name": "PaymentRequest must be primary interface of paymentRequest",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of paymentRequest",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"show([object Object])\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: calling show([object Object]) on paymentRequest with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"abort()\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"canMakePayment()\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"id\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"shippingAddress\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"shippingOption\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"shippingType\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"onmerchantvalidation\" with the proper type",
          "status": "FAIL",
          "message": "assert_inherits: property \"onmerchantvalidation\" not found in prototype chain"
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"onshippingaddresschange\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"onshippingoptionchange\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest interface: paymentRequest must inherit property \"onpaymentmethodchange\" with the proper type",
          "status": "FAIL",
          "message": "assert_inherits: property \"onpaymentmethodchange\" not found in prototype chain"
        },
        {
          "name": "PaymentAddress interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface: operation toJSON()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentAddress interface: attribute city",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get city' expected \"get city\" but got \"city\""
        },
        {
          "name": "PaymentAddress interface: attribute country",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get country' expected \"get country\" but got \"country\""
        },
        {
          "name": "PaymentAddress interface: attribute dependentLocality",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get dependentLocality' expected \"get dependentLocality\" but got \"dependentLocality\""
        },
        {
          "name": "PaymentAddress interface: attribute organization",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get organization' expected \"get organization\" but got \"organization\""
        },
        {
          "name": "PaymentAddress interface: attribute phone",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get phone' expected \"get phone\" but got \"phone\""
        },
        {
          "name": "PaymentAddress interface: attribute postalCode",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get postalCode' expected \"get postalCode\" but got \"postalCode\""
        },
        {
          "name": "PaymentAddress interface: attribute recipient",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get recipient' expected \"get recipient\" but got \"recipient\""
        },
        {
          "name": "PaymentAddress interface: attribute region",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get region' expected \"get region\" but got \"region\""
        },
        {
          "name": "PaymentAddress interface: attribute regionCode",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"regionCode\" expected true got false"
        },
        {
          "name": "PaymentAddress interface: attribute sortingCode",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get sortingCode' expected \"get sortingCode\" but got \"sortingCode\""
        },
        {
          "name": "PaymentAddress interface: attribute addressLine",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get addressLine' expected \"get addressLine\" but got \"addressLine\""
        },
        {
          "name": "PaymentResponse interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of PaymentResponse is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "PaymentResponse interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentResponse interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentResponse interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: prototype of PaymentResponse.prototype is not EventTarget.prototype expected object \"[object EventTargetPrototype]\" but got object \"[object Object]\""
        },
        {
          "name": "PaymentResponse interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentResponse interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentResponse interface: operation toJSON()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentResponse interface: attribute requestId",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get requestId' expected \"get requestId\" but got \"requestId\""
        },
        {
          "name": "PaymentResponse interface: attribute methodName",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get methodName' expected \"get methodName\" but got \"methodName\""
        },
        {
          "name": "PaymentResponse interface: attribute details",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get details' expected \"get details\" but got \"details\""
        },
        {
          "name": "PaymentResponse interface: attribute shippingAddress",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get shippingAddress' expected \"get shippingAddress\" but got \"shippingAddress\""
        },
        {
          "name": "PaymentResponse interface: attribute shippingOption",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get shippingOption' expected \"get shippingOption\" but got \"shippingOption\""
        },
        {
          "name": "PaymentResponse interface: attribute payerName",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get payerName' expected \"get payerName\" but got \"payerName\""
        },
        {
          "name": "PaymentResponse interface: attribute payerEmail",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get payerEmail' expected \"get payerEmail\" but got \"payerEmail\""
        },
        {
          "name": "PaymentResponse interface: attribute payerPhone",
          "status": "FAIL",
          "message": "assert_equals: getter must have the name 'get payerPhone' expected \"get payerPhone\" but got \"payerPhone\""
        },
        {
          "name": "PaymentResponse interface: operation complete(PaymentComplete)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentResponse interface: operation retry(PaymentValidationErrors)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"retry\" missing"
        },
        {
          "name": "PaymentResponse interface: attribute onpayerdetailchange",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onpayerdetailchange\" expected true got false"
        },
        {
          "name": "MerchantValidationEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface object length",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface object name",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface: attribute methodName",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface: attribute validationURL",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent interface: operation complete([object Object])",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"MerchantValidationEvent\" expected property \"MerchantValidationEvent\" missing"
        },
        {
          "name": "MerchantValidationEvent must be primary interface of new MerchantValidationEvent(\"merchantvalidation\")",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'MerchantValidationEvent' is not defined\""
        },
        {
          "name": "Stringification of new MerchantValidationEvent(\"merchantvalidation\")",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'MerchantValidationEvent' is not defined\""
        },
        {
          "name": "MerchantValidationEvent interface: new MerchantValidationEvent(\"merchantvalidation\") must inherit property \"methodName\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'MerchantValidationEvent' is not defined\""
        },
        {
          "name": "MerchantValidationEvent interface: new MerchantValidationEvent(\"merchantvalidation\") must inherit property \"validationURL\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'MerchantValidationEvent' is not defined\""
        },
        {
          "name": "MerchantValidationEvent interface: new MerchantValidationEvent(\"merchantvalidation\") must inherit property \"complete([object Object])\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'MerchantValidationEvent' is not defined\""
        },
        {
          "name": "MerchantValidationEvent interface: calling complete([object Object]) on new MerchantValidationEvent(\"merchantvalidation\") with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'MerchantValidationEvent' is not defined\""
        },
        {
          "name": "PaymentMethodChangeEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface object length",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface object name",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface: attribute methodName",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent interface: attribute methodDetails",
          "status": "FAIL",
          "message": "assert_own_property: self does not have own property \"PaymentMethodChangeEvent\" expected property \"PaymentMethodChangeEvent\" missing"
        },
        {
          "name": "PaymentMethodChangeEvent must be primary interface of new PaymentMethodChangeEvent(\"paymentmethodchange\")",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'PaymentMethodChangeEvent' is not defined\""
        },
        {
          "name": "Stringification of new PaymentMethodChangeEvent(\"paymentmethodchange\")",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'PaymentMethodChangeEvent' is not defined\""
        },
        {
          "name": "PaymentMethodChangeEvent interface: new PaymentMethodChangeEvent(\"paymentmethodchange\") must inherit property \"methodName\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'PaymentMethodChangeEvent' is not defined\""
        },
        {
          "name": "PaymentMethodChangeEvent interface: new PaymentMethodChangeEvent(\"paymentmethodchange\") must inherit property \"methodDetails\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'PaymentMethodChangeEvent' is not defined\""
        },
        {
          "name": "PaymentRequestUpdateEvent interface: new PaymentMethodChangeEvent(\"paymentmethodchange\") must inherit property \"updateWith([object Object])\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'PaymentMethodChangeEvent' is not defined\""
        },
        {
          "name": "PaymentRequestUpdateEvent interface: calling updateWith([object Object]) on new PaymentMethodChangeEvent(\"paymentmethodchange\") with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: 'PaymentMethodChangeEvent' is not defined\""
        },
        {
          "name": "PaymentRequestUpdateEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of PaymentRequestUpdateEvent is not Event expected function \"function Event() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "PaymentRequestUpdateEvent interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface: operation updateWith([object Object])",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent must be primary interface of new PaymentRequestUpdateEvent(\"paymentrequestupdate\")",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of new PaymentRequestUpdateEvent(\"paymentrequestupdate\")",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface: new PaymentRequestUpdateEvent(\"paymentrequestupdate\") must inherit property \"updateWith([object Object])\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequestUpdateEvent interface: calling updateWith([object Object]) on new PaymentRequestUpdateEvent(\"paymentrequestupdate\") with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/onmerchantvalidation-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a onmerchantvalidation IDL attribute",
          "status": "FAIL",
          "message": "assert_idl_attribute: property \"onmerchantvalidation\" not found in prototype chain"
        },
        {
          "name": "onmerchantvalidation attribute is a generic handler for \"merchantvalidation\"",
          "status": "FAIL",
          "message": "assert_true: event did not fire expected true got false"
        },
        {
          "name": "onmerchantvalidation attribute is a handler for MerchantValidationEvent",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        },
        {
          "name": "onmerchantvalidation attribute and listeners both work",
          "status": "FAIL",
          "message": "'MerchantValidationEvent' is not defined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/onpaymentmenthodchange-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a onpaymentmethodchange IDL attribute",
          "status": "FAIL",
          "message": "assert_idl_attribute: property \"onpaymentmethodchange\" not found in prototype chain"
        },
        {
          "name": "onpaymentmethodchange attribute is a generic handler for \"paymentmethodchange\"",
          "status": "FAIL",
          "message": "assert_true: event did not fire expected true got false"
        },
        {
          "name": "onpaymentmethodchange attribute is a handler for PaymentMethodChangeEvent",
          "status": "FAIL",
          "message": "'PaymentMethodChangeEvent' is not defined"
        },
        {
          "name": "onpaymentmethodchange attribute and listeners both work",
          "status": "FAIL",
          "message": "'PaymentMethodChangeEvent' is not defined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-abort-method.https.html",
      "subtests": [
        {
          "name": "Throws if the promise [[state]] is not \"interactive\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test for PaymentRequest.abort() method",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"Error: unimplemented\""
        },
        {
          "name": "Test for PaymentRequest.abort() method 1",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"Error: unimplemented\""
        },
        {
          "name": "Calling abort() multiple times is always a new object.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-canmakepayment-method.https.html",
      "subtests": [
        {
          "name": "If request.[[state]] is \"created\", then return a promise that resolves to true for known method.",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "If payment method identifier and serialized parts are supported, resolve promise with true.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "If payment method identifier is unknown, resolve promise with false.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "Optionally, at the user agent's discretion, return a promise rejected with a \"NotAllowedError\" DOMException.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "If request.[[state]] is \"interactive\", then return a promise rejected with an \"InvalidStateError\" DOMException.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "If request.[[state]] is \"closed\", then return a promise rejected with an \"InvalidStateError\" DOMException.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "Calling canMakePayment() multiple times is always a new object.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-constructor-crash.https.html",
      "subtests": [
        {
          "name": "Don't crash if there is an abusive number of payment methods in the methodData sequence",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if PaymentMethodData.supportedMethods is an abusive length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if the request id has an abusive length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if PaymentDetailsInit.total.label is an abusive length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if total.amount.value is an abusive length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if details.displayItems has an abusive number of items",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if details.shippingOptions has an abusive number of items",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if PaymentShippingOptions.label is an abusive length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if the PaymentShippingOptions.amount.value is an abusive length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Don't crash if PaymentItem.label is an abusive length",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-constructor.https.html",
      "subtests": [
        {
          "name": "If details.id is missing, assign an identifier",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If details.id is missing, assign a unique identifier",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If the same id is provided, then use it",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Use ids even if they are strange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Use provided request ID",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If the length of the methodData sequence is zero, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Modifier method data must be JSON-serializable object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Rethrow any exceptions of JSON-serializing paymentMethod.data into a string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If details.total.amount.value is not a valid decimal monetary value, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentDetailsBase members can be 0 length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Negative values are allowed for displayItems.amount.value, irrespective of total amount",
          "status": "PASS",
          "message": null
        },
        {
          "name": "it handles high precision currency values without throwing",
          "status": "PASS",
          "message": null
        },
        {
          "name": "For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If there is no selected shipping option, then PaymentRequest.shippingOption remains null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If there is a selected shipping option, and requestShipping is set, then that option becomes synchronously selected",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If requestShipping is set, and if there is a multiple selected shipping options, only the last is selected.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If there are any duplicate shipping option ids, and shipping is requested, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Throw when there are duplicate shippingOption ids, even if other values are different",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Throw TypeError if modifier.total.amount.value is not a valid decimal monetary value",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If amount.value of additionalDisplayItems is not a valid decimal monetary value, then throw a TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Modifier data must be JSON-serializable object (an Array in this case)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Modifier data must be JSON-serializable object (an Object in this case)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Rethrow any exceptions of JSON-serializing modifier.data",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Shipping type should be valid",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest.shippingAddress must initially be null",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If options.requestShipping is not set, then request.shippingType attribute is null.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If options.requestShipping is true, request.shippingType will be options.shippingType.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-ctor-currency-code-checks.https.html",
      "subtests": [
        {
          "name": "Check and canonicalize valid details.total.amount",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize invalid details.total.amount and rethrow any exceptions.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize valid details.displayItems amount",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize invalid details.displayItems amount and rethrow RangeError.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize valid details.shippingOptions amount.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize invalid details.shippingOptions amount and rethrow RangeError.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize valid modifiers[n].total amount.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize invalid modifiers[n].total amount and rethrow RangeError.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize valid modifiers[n].additionaDisplayItem amount.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        },
        {
          "name": "Check and canonicalize invalid modifiers[n].additionaDisplayItem amount and rethrow RangeError.",
          "status": "FAIL",
          "message": "assert_throws: Expected smoke test to throw. function \"function smokeTest() {\n  new PaymentRequest(defaultMethods, invalidTotal);\n}\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-ctor-pmi-handling.https.html",
      "subtests": [
        {
          "name": "Must support valid standard URL PMIs",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Must not throw on syntactically valid standardized payment method identifiers, even if they are not supported",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Must throw on syntactically invalid standardized payment method identifiers",
          "status": "FAIL",
          "message": "assert_throws: expected RangeError processing invalid standardized PMI \"basic-ðŸ’³\" function \"() => {\n        const methods = [{ supportedMethods: invalidMethod }];\n        new PaymentRequest(methods, defaultDetails);\n      }\" did not throw"
        },
        {
          "name": "Constructor MUST throw if given an invalid URL-based payment method identifier",
          "status": "FAIL",
          "message": "assert_throws: expected RangeError processing invalid URL PMI \"https://username@example.com/pay\" function \"() => {\n        const methods = [{ supportedMethods: invalidMethod }];\n        new PaymentRequest(methods, defaultDetails);\n      }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-id-attribute.https.html",
      "subtests": [
        {
          "name": "PaymentRequest's id attribute's value can be set via PaymentDetailsInit dictionary",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PaymentRequest's id attribute must be a UUID when PaymentDetailsInit.id is missing",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-insecure.http.html",
      "subtests": [
        {
          "name": "PaymentRequest constructor must not be exposed in insecure context",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-not-exposed.https.worker.html",
      "subtests": [
        {
          "name": "PaymentRequest constructor must not be exposed in worker global scope",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-onshippingaddresschange-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a onshippingaddresschange IDL attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onshippingaddresschange attribute is a generic handler for \"shippingaddresschange\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onshippingaddresschange attribute is a handler for PaymentRequestUpdateEvent",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onshippingaddresschange attribute and listeners both work",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-onshippingoptionchange-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a onshippingoptionchange IDL attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onshippingoptionchange attribute is a generic handler for \"shippingoptionchange\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onshippingoptionchange attribute is a handler for PaymentRequestUpdateEvent",
          "status": "PASS",
          "message": null
        },
        {
          "name": "onshippingoptionchange attribute and listeners both work",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-shippingAddress-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a .shippingAddress IDL attribute.",
          "status": "PASS",
          "message": null
        },
        {
          "name": ".shippingAddress attribute must default to null.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-shippingOption-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a .shippingOption IDL attribute.",
          "status": "PASS",
          "message": null
        },
        {
          "name": ".shippingOption attribute must default to null.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If there is a single shipping option, but selected is false, then .shippingOption must be null.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If there are multiple shipping options all with `selected` set to false, then .shippingOption is null.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Given multiple shipping options, it must use the selected shipping option for .shippingOption value.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If there are multiple of the shipping options with selected true, then .shippingOption is the last selected shipping option in order.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-shippingType-attribute.https.html",
      "subtests": [
        {
          "name": "Must have a shippingType IDL attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If options.requestShipping is false, then request.shippingType attribute is null.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "If options.requestShipping is true, request.shippingType will be options.shippingType.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/payment-request-show-method.https.html",
      "subtests": [
        {
          "name": "Calling show() without being triggered by user interaction throws",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "Throws if the promise [[state]] is not 'created'.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "If the user agent's \"payment request is showing\" boolean is true, then return a promise rejected with an \"AbortError\" DOMException.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "If payment method consultation produces no supported method of payment, then return a promise rejected with a \"NotSupportedError\" DOMException.",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "Calling show() multiple times is always a new object.",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/payment-request/payment-response/onpayerdetailchange-attribute.https.html",
      "subtests": [
        {
          "name": "PaymentResponse inherits from EventTarget",
          "status": "FAIL",
          "message": "assert_equals: expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "PaymentResponse has an onpayerdetailchange in the prototype chain",
          "status": "FAIL",
          "message": "assert_true: expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/payment-request/rejects_if_not_active.https.html",
      "subtests": [
        {
          "name": "PaymentRequest.show() aborts if the document is not active",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Permission denied\""
        },
        {
          "name": "PaymentRequest.show() aborts if the document is active, but not fully active",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Permission denied\""
        },
        {
          "name": "If a payment request is showing, but its document is navigated away (so no longer fully active), the payment request aborts.",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"Error: Can't execute code from a freed script\""
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}
